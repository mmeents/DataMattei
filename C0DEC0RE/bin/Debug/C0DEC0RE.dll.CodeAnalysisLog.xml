<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="d:\programs\visual studio 2013\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Namespaces>
  <Namespace Name="C0DEC0RE">
   <Messages>
    <Message Id="DEC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'DEC' in namespace name 'C0DEC0RE' by changing it to 'Dec'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="D:\Dev\A Projects\C0DEC0RE\bin\Debug\C0DEC0RE.dll">
   <Modules>
    <Module Name="c0dec0re.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'C0DEC0RE.dll' with a strong name key.</Issue>
      </Message>
      <Message Id="DEC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="85" Level="Error">Correct the casing of 'DEC' in assembly name 'C0DEC0RE.dll' by changing it to 'Dec'.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'C0DEC0RE.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Warning">Because assembly 'C0DEC0RE.dll' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="C0DEC0RE">
       <Types>
        <Type Name="AbstractInstallerBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ConfirmAttributeExists(System.Type,System.Type)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="AbstractInstallerBuilder.cs" Line="74">Consider changing the type of parameter 'instrumentedType' in 'AbstractInstallerBuilder.ConfirmAttributeExists(Type, Type)' from 'Type' to its base type 'MemberInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="AbstractInstallerBuilder.cs" Line="74">The 'this' parameter (or 'Me' in Visual Basic) of 'AbstractInstallerBuilder.ConfirmAttributeExists(Type, Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="AbstractInstallerBuilder.cs" Line="75">In externally visible method 'AbstractInstallerBuilder.ConfirmAttributeExists(Type, Type)', validate parameter 'instrumentedType' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateInstallers(System.Collections.Generic.ICollection`1&lt;System.Type&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="instrumentedTypes" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error">'instrumentedTypes', a parameter declared in 'AbstractInstallerBuilder.CreateInstallers(ICollection&lt;Type&gt;)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fill(System.Configuration.Install.Installer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="AbstractInstallerBuilder.cs" Line="39">In externally visible method 'AbstractInstallerBuilder.Fill(Installer)', validate parameter 'installer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindInstrumentedTypes(System.Type[],System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="instrumentedTypes" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="AbstractInstallerBuilder.cs" Line="100">'instrumentedTypes', a variable declared in 'AbstractInstallerBuilder.FindInstrumentedTypes(Type[], Type)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InstrumentedTypes" Kind="Property" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="AbstractInstallerBuilder.cs" Line="50">Change 'AbstractInstallerBuilder.InstrumentedTypes' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsInstrumented(System.Type,System.Type)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="attributeType" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="AbstractInstallerBuilder.cs" Line="91">'AbstractInstallerBuilder.IsInstrumented(Type, Type)' declares a variable, 'attributeType', of type 'Type', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AssemblerBasedObjectFactory`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Create(C0DEC0RE.IBuilderContext,!1,C0DEC0RE.IConfigurationSource,C0DEC0RE.ConfigurationReflectionCache)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="reflectionCache" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="AssemblerBasedObjectFactory.cs" Line="51">'reflectionCache', a parameter declared in 'AssemblerBasedObjectFactory&lt;TObject, TConfiguration&gt;.Create(IBuilderContext, TConfiguration, IConfigurationSource, ConfigurationReflectionCache)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAssemblerAttribute(System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="AssemblerBasedObjectFactory.cs" Line="95">The 'this' parameter (or 'Me' in Visual Basic) of 'AssemblerBasedObjectFactory&lt;TObject, TConfiguration&gt;.GetAssemblerAttribute(Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#reflectionCache" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'AssemblerBasedObjectFactory&lt;TObject, TConfiguration&gt;.reflectionCache' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BaseFileConfigurationSourceImplementation" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'BaseFileConfigurationSourceImplementation' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filepath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="37">In method 'BaseFileConfigurationSourceImplementation.BaseFileConfigurationSourceImplementation(string)', correct the spelling of 'Filepath' in parameter name 'configurationFilepath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filepath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="53">In method 'BaseFileConfigurationSourceImplementation.BaseFileConfigurationSourceImplementation(string, bool)', correct the spelling of 'Filepath' in parameter name 'configurationFilepath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSectionsToUpdate(C0DEC0RE.ConfigurationSourceWatcher,System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="192">The 'this' parameter (or 'Me' in Visual Basic) of 'BaseFileConfigurationSourceImplementation.AddSectionsToUpdate(ConfigurationSourceWatcher, IDictionary&lt;string, string&gt;)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConfigSourceChanged(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="configSource" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="160">Parameter 'configSource' of 'BaseFileConfigurationSourceImplementation.ConfigSourceChanged(string)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConfigSourceWatcherMappings" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_ConfigSourceWatcherMappings()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="262">'BaseFileConfigurationSourceImplementation.ConfigSourceWatcherMappings.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CreateWatcherForConfigSource(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="319">Replace the call to 'string.operator ==(string, string)' in 'BaseFileConfigurationSourceImplementation.CreateWatcherForConfigSource(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="243">Change 'BaseFileConfigurationSourceImplementation.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message Id="eventHandlers" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="243">'BaseFileConfigurationSourceImplementation' contains field 'BaseFileConfigurationSourceImplementation.eventHandlers' that is of IDisposable type: 'EventHandlerList'. Change the Dispose method on 'BaseFileConfigurationSourceImplementation' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="243">Modify 'BaseFileConfigurationSourceImplementation.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NotifyUpdatedSections(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="427">Modify 'BaseFileConfigurationSourceImplementation.NotifyUpdatedSections(IEnumerable&lt;string&gt;)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RefreshAndValidateSections(System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;,System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;,System.Collections.Generic.ICollection`1&lt;System.String&gt;&amp;,System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'sectionsToNotify' be an out parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'sectionsWithChangedConfigSource' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SectionChangedHandlers" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_SectionChangedHandlers()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="267">'BaseFileConfigurationSourceImplementation.SectionChangedHandlers.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SetWatcherForSection(System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="365">Replace the call to 'string.operator !=(string, string)' in 'BaseFileConfigurationSourceImplementation.SetWatcherForSection(string, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WatchedConfigSources" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_WatchedConfigSources()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="252">'BaseFileConfigurationSourceImplementation.WatchedConfigSources.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#WatchedSections" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_WatchedSections()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseFileConfigurationSourceImplementation.cs" Line="257">'BaseFileConfigurationSourceImplementation.WatchedSections.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="BaseWmiEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#UtcTimeStamp" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TimeStamp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BaseWmiEvent.cs" Line="32">The compound word 'TimeStamp' in member name 'BaseWmiEvent.UtcTimeStamp' exists as a discrete term. If your usage is intended to be single word, case it as 'Timestamp' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BuilderAwareStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildUp(C0DEC0RE.IBuilderContext,System.Type,System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderAwareStrategy.cs" Line="35">In member 'BuilderAwareStrategy.BuildUp(IBuilderContext, Type, object, string)', change parameter name 't' to 'typeToBuild' in order to match the identifier as it has been declared in 'BuilderStrategy.BuildUp(IBuilderContext, Type, object, string)'.</Issue>
            </Message>
            <Message Id="3#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderAwareStrategy.cs" Line="35">In member 'BuilderAwareStrategy.BuildUp(IBuilderContext, Type, object, string)', change parameter name 'id' to 'idToBuild' in order to match the identifier as it has been declared in 'BuilderStrategy.BuildUp(IBuilderContext, Type, object, string)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BuilderBase`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(C0DEC0RE.IBuilderConfigurator`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderBase.cs" Line="41">In externally visible method 'BuilderBase&lt;TStageEnum&gt;.BuilderBase(IBuilderConfigurator&lt;TStageEnum&gt;)', validate parameter 'configurator' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeContext(C0DEC0RE.IBuilderStrategyChain,C0DEC0RE.IReadWriteLocator,C0DEC0RE.PolicyList[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="policies" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderBase.cs" Line="111">'policies', a variable declared in 'BuilderBase&lt;TStageEnum&gt;.MakeContext(IBuilderStrategyChain, IReadWriteLocator, params PolicyList[])', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BuilderContext" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SetLocator(C0DEC0RE.IReadWriteLocator)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="locator" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderContext.cs" Line="66">'locator', a parameter declared in 'BuilderContext.SetLocator(IReadWriteLocator)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetPolicies(C0DEC0RE.PolicyList)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="policies" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderContext.cs" Line="82">'policies', a parameter declared in 'BuilderContext.SetPolicies(PolicyList)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BuilderPolicyKey" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'BuilderPolicyKey' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'BuilderPolicyKey' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="BuilderStage" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PreCreation" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="PreCreation" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'PreCreation' in member name 'BuilderStage.PreCreation' exists as a discrete term. If your usage is intended to be single word, case it as 'Precreation' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BuilderStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildUp(C0DEC0RE.IBuilderContext,System.Type,System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="36">In externally visible method 'BuilderStrategy.BuildUp(IBuilderContext, Type, object, string)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUp`1(C0DEC0RE.IBuilderContext,!!0,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="27">The compound word 'BuildUp' in member name 'BuilderStrategy.BuildUp&lt;TItem&gt;(IBuilderContext, TItem, string)' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParametersToTypeList(System.Object[])" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="63">The 'this' parameter (or 'Me' in Visual Basic) of 'BuilderStrategy.ParametersToTypeList(params object[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="66">In externally visible method 'BuilderStrategy.ParametersToTypeList(params object[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TearDown(C0DEC0RE.IBuilderContext,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="49">In externally visible method 'BuilderStrategy.TearDown(IBuilderContext, object)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TraceBuildUp(C0DEC0RE.IBuilderContext,System.Type,System.String,System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="81">The compound word 'BuildUp' in member name 'BuilderStrategy.TraceBuildUp(IBuilderContext, Type, string, string, params object[])' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="81">Consider changing the type of parameter 'typeToBuild' in 'BuilderStrategy.TraceBuildUp(IBuilderContext, Type, string, string, params object[])' from 'Type' to its base type 'MemberInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="82">In externally visible method 'BuilderStrategy.TraceBuildUp(IBuilderContext, Type, string, string, params object[])', validate parameter 'context' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="87">In externally visible method 'BuilderStrategy.TraceBuildUp(IBuilderContext, Type, string, string, params object[])', validate parameter 'typeToBuild' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TraceEnabled(C0DEC0RE.IBuilderContext)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="115">The 'this' parameter (or 'Me' in Visual Basic) of 'BuilderStrategy.TraceEnabled(IBuilderContext)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="116">In externally visible method 'BuilderStrategy.TraceEnabled(IBuilderContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TraceTearDown(C0DEC0RE.IBuilderContext,System.Object,System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="99">The compound word 'TearDown' in member name 'BuilderStrategy.TraceTearDown(IBuilderContext, object, string, params object[])' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="100">In externally visible method 'BuilderStrategy.TraceTearDown(IBuilderContext, object, string, params object[])', validate parameter 'context' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategy.cs" Line="105">In externally visible method 'BuilderStrategy.TraceTearDown(IBuilderContext, object, string, params object[])', validate parameter 'item' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BuilderStrategyChain" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddRange(System.Collections.IEnumerable)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategyChain.cs" Line="59">In externally visible method 'BuilderStrategyChain.AddRange(IEnumerable)', validate parameter 'strategies' before using it.</Issue>
            </Message>
            <Message Id="strategies" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="BuilderStrategyChain.cs" Line="58">'strategies', a parameter declared in 'BuilderStrategyChain.AddRange(IEnumerable)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CloneParameter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(C0DEC0RE.IParameter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="CloneParameter.cs" Line="30">In method 'CloneParameter.CloneParameter(IParameter)', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValue(C0DEC0RE.IBuilderContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="CloneParameter.cs" Line="51">'val', a variable, is cast to type 'ICloneable' multiple times in method 'CloneParameter.GetValue(IBuilderContext)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigurationChangedEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'ConfigurationChangedEventHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ConfigurationChangeFileWatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Finalize()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="FinalizeImplementation" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationChangeFileWatcher.cs" Line="51">Modify 'ConfigurationChangeFileWatcher.~ConfigurationChangeFileWatcher()' so that it calls Dispose(false) and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigurationChangeWatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'ConfigurationChangeWatcher' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationChangeWatcher.cs" Line="128">Modify 'ConfigurationChangeWatcher.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Finalize()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="FinalizeImplementation" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationChangeWatcher.cs" Line="65">Modify 'ConfigurationChangeWatcher.~ConfigurationChangeWatcher()' so that it calls Dispose(false) and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCurrentLastWriteTime()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'ConfigurationChangeWatcher.GetCurrentLastWriteTime()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEventSourceName()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'ConfigurationChangeWatcher.GetEventSourceName()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogException(System.Exception)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationChangeWatcher.cs" Line="179">Method 'ConfigurationChangeWatcher.LogException(Exception)' passes a literal string as parameter 'message' of a call to 'EventLog.WriteEntry(string, string, EventLogEntryType)'. Retrieve the following string(s) from a resource table instead: " :".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationChangeWatcher.cs" Line="182">Modify 'ConfigurationChangeWatcher.LogException(Exception)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnConfigurationChanged()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationChangeWatcher.cs" Line="169">Modify 'ConfigurationChangeWatcher.OnConfigurationChanged()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Poller(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="pollingStatus" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationChangeWatcher.cs" Line="214">'pollingStatus', a variable declared in 'ConfigurationChangeWatcher.Poller(object)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResetDefaultPollDelay()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationChangeWatcher.cs" Line="43">'ConfigurationChangeWatcher.ResetDefaultPollDelay()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetDefaultPollDelayInMilliseconds(System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationChangeWatcher.cs" Line="38">'ConfigurationChangeWatcher.SetDefaultPollDelayInMilliseconds(int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetPollDelayInMilliseconds(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationChangeWatcher.cs" Line="48">'ConfigurationChangeWatcher.SetPollDelayInMilliseconds(int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigurationChangeWatcherPauser" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'ConfigurationChangeWatcherPauser' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ConfigurationChangingEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'ConfigurationChangingEventHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ConfigurationFileSourceWatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.String,System.Boolean,C0DEC0RE.ConfigurationChangedEventHandler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filepath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationFileSourceWatcher.cs" Line="36">In method 'ConfigurationFileSourceWatcher.ConfigurationFileSourceWatcher(string, string, bool, ConfigurationChangedEventHandler)', correct the spelling of 'Filepath' in parameter name 'configurationFilepath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFullFileName(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filepath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationFileSourceWatcher.cs" Line="62">In method 'ConfigurationFileSourceWatcher.GetFullFileName(string, string)', correct the spelling of 'Filepath' in parameter name 'configurationFilepath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationFileSourceWatcher.cs" Line="63">Replace the call to 'string.operator ==(string, string)' in 'ConfigurationFileSourceWatcher.GetFullFileName(string, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigurationNameMapperAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add a public read-only property accessor for positional argument 'nameMappingObjectType' of Attribute 'ConfigurationNameMapperAttribute'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#NameMappingObjectType" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ConfigurationNameMapperAttribute.NameMappingObjectType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigurationNameMappingStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildUp(C0DEC0RE.IBuilderContext,System.Type,System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationNameMappingStrategy.cs" Line="42">In member 'ConfigurationNameMappingStrategy.BuildUp(IBuilderContext, Type, object, string)', change parameter name 't' to 'typeToBuild' in order to match the identifier as it has been declared in 'BuilderStrategy.BuildUp(IBuilderContext, Type, object, string)'.</Issue>
            </Message>
            <Message Id="3#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationNameMappingStrategy.cs" Line="42">In member 'ConfigurationNameMappingStrategy.BuildUp(IBuilderContext, Type, object, string)', change parameter name 'id' to 'idToBuild' in order to match the identifier as it has been declared in 'BuilderStrategy.BuildUp(IBuilderContext, Type, object, string)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigurationNameProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#IsMadeUpName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationNameProvider.cs" Line="41">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ConfigurationNameProvider.IsMadeUpName(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeUpName()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MakeUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationNameProvider.cs" Line="28">The compound word 'MakeUp' in member name 'ConfigurationNameProvider.MakeUpName()' exists as a discrete term. If your usage is intended to be single word, case it as 'Makeup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigurationReflectionCache" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#HasCachedCustomAttribute`1(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationReflectionCache.cs" Line="71">Consider a design where 'ConfigurationReflectionCache.HasCachedCustomAttribute&lt;TAttribute&gt;(Type)' doesn't require explicit type parameter 'TAttribute' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RetrieveAttribute`1(C0DEC0RE.PairKey`2&lt;System.Type,System.Type&gt;,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationReflectionCache.cs" Line="177">The 'this' parameter (or 'Me' in Visual Basic) of 'ConfigurationReflectionCache.RetrieveAttribute&lt;TAttribute&gt;(PairKey&lt;Type, Type&gt;, bool)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigurationSourceSection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetConfigurationSourceSection()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationSourceSection.cs" Line="40">Change 'ConfigurationSourceSection.GetConfigurationSourceSection()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigurationSourceWatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'ConfigurationSourceWatcher' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Boolean,C0DEC0RE.ConfigurationChangedEventHandler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="changed" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationSourceWatcher.cs" Line="30">Parameter 'changed' of 'ConfigurationSourceWatcher.ConfigurationSourceWatcher(string, bool, ConfigurationChangedEventHandler)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="refresh" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationSourceWatcher.cs" Line="30">Parameter 'refresh' of 'ConfigurationSourceWatcher.ConfigurationSourceWatcher(string, bool, ConfigurationChangedEventHandler)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#configWatcher" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ConfigurationSourceWatcher.configWatcher' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationSourceWatcher.cs" Line="93">Change 'ConfigurationSourceWatcher.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationSourceWatcher.cs" Line="93">Modify 'ConfigurationSourceWatcher.IDisposable.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationSourceWatcher.cs" Line="93">Rename 'ConfigurationSourceWatcher.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationSourceWatcher.cs" Line="93">Make 'ConfigurationSourceWatcher' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDisposable.Dispose()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WatchedSections" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfigurationSourceWatcher.cs" Line="57">Change 'ConfigurationSourceWatcher.WatchedSections' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfiguredObjectStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildUp(C0DEC0RE.IBuilderContext,System.Type,System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfiguredObjectStrategy.cs" Line="52">In member 'ConfiguredObjectStrategy.BuildUp(IBuilderContext, Type, object, string)', change parameter name 't' to 'typeToBuild' in order to match the identifier as it has been declared in 'BuilderStrategy.BuildUp(IBuilderContext, Type, object, string)'.</Issue>
            </Message>
            <Message Id="3#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfiguredObjectStrategy.cs" Line="52">In member 'ConfiguredObjectStrategy.BuildUp(IBuilderContext, Type, object, string)', change parameter name 'id' to 'idToBuild' in order to match the identifier as it has been declared in 'BuilderStrategy.BuildUp(IBuilderContext, Type, object, string)'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfiguredObjectStrategy.cs" Line="65">In externally visible method 'ConfiguredObjectStrategy.BuildUp(IBuilderContext, Type, object, string)', validate parameter 't' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCustomFactory(System.Type,C0DEC0RE.ConfigurationReflectionCache)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConfiguredObjectStrategy.cs" Line="77">The 'this' parameter (or 'Me' in Visual Basic) of 'ConfiguredObjectStrategy.GetCustomFactory(Type, ConfigurationReflectionCache)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConnectionString" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetTokenPositions(System.String,System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConnectionString.cs" Line="192">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ConnectionString.GetTokenPositions(string, out int, out int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveCredentials(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConnectionString.cs" Line="219">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ConnectionString.RemoveCredentials(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConstructorPolicy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(C0DEC0RE.IParameter[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConstructorPolicy.cs" Line="39">In externally visible method 'ConstructorPolicy.ConstructorPolicy(params IParameter[])', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetParameters(C0DEC0RE.IBuilderContext,System.Type,System.String,System.Reflection.ConstructorInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="constructor" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ConstructorPolicy.cs" Line="84">'constructor', a parameter declared in 'ConstructorPolicy.GetParameters(IBuilderContext, Type, string, ConstructorInfo)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectConstructor(C0DEC0RE.IBuilderContext,System.Type,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConstructorPolicy.cs" Line="77">In externally visible method 'ConstructorPolicy.SelectConstructor(IBuilderContext, Type, string)', validate parameter 'type' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConstructorReflectionStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddParametersToPolicy(C0DEC0RE.IBuilderContext,System.Type,System.String,C0DEC0RE.IReflectionMemberInfo`1&lt;System.Reflection.ConstructorInfo&gt;,System.Collections.Generic.IEnumerable`1&lt;C0DEC0RE.IParameter&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConstructorReflectionStrategy.cs" Line="71">In externally visible method 'ConstructorReflectionStrategy.AddParametersToPolicy(IBuilderContext, Type, string, IReflectionMemberInfo&lt;ConstructorInfo&gt;, IEnumerable&lt;IParameter&gt;)', validate parameter 'context' before using it.</Issue>
            </Message>
            <Message Id="4" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConstructorReflectionStrategy.cs" Line="68">In externally visible method 'ConstructorReflectionStrategy.AddParametersToPolicy(IBuilderContext, Type, string, IReflectionMemberInfo&lt;ConstructorInfo&gt;, IEnumerable&lt;IParameter&gt;)', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMembers(C0DEC0RE.IBuilderContext,System.Type,System.Object,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConstructorReflectionStrategy.cs" Line="30">In externally visible method 'ConstructorReflectionStrategy.GetMembers(IBuilderContext, Type, object, string)', validate parameter 'context' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ConstructorReflectionStrategy.cs" Line="35">In externally visible method 'ConstructorReflectionStrategy.GetMembers(IBuilderContext, Type, object, string)', validate parameter 'typeToBuild' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CreateNewAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateParameter(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="CreateNewAttribute.cs" Line="27">In member 'CreateNewAttribute.CreateParameter(Type)', change parameter name 'annotatedMemberType' to 'memberType' in order to match the identifier as it has been declared in 'ParameterAttribute.CreateParameter(Type)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CreationParameter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetValue(C0DEC0RE.IBuilderContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="CreationParameter.cs" Line="50">In externally visible method 'CreationParameter.GetValue(IBuilderContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CreationStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ValidateCtorParameters(System.Reflection.MethodBase,System.Object[],System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="CreationStrategy.cs" Line="133">'CreationStrategy.ValidateCtorParameters(MethodBase, object[], Type)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="CreationStrategy.cs" Line="133">The 'this' parameter (or 'Me' in Visual Basic) of 'CreationStrategy.ValidateCtorParameters(MethodBase, object[], Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CustomProviderAssembler`3" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="85" Level="Error">Consider a design where 'CustomProviderAssembler&lt;TObject, TConfiguration, TConcreteConfiguration&gt;' has no more than 2 type parameters.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="CustomProviderDataHelper`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateAttributes()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IEqualityComparer)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="StringComparer" Certainty="75" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="CustomProviderDataHelper.cs" Line="184">'CustomProviderDataHelper&lt;T&gt;.CreateAttributes()' passes 'StringComparer.InvariantCulture' as the 'StringComparer' parameter to 'NameValueCollection.NameValueCollection(IEqualityComparer)'. To perform a non-linguistic comparison, specify 'StringComparer.Ordinal' or 'StringComparer.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#propertiesCollection" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CustomProviderDataHelper&lt;T&gt;.propertiesCollection' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Database" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1059">In externally visible method 'Database.AddParameter(DbCommand, string, DbType, int, ParameterDirection, bool, byte, byte, string, DataRowVersion, object)', validate parameter 'command' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BeginTransaction(System.Data.Common.DbConnection)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1411">The 'this' parameter (or 'Me' in Visual Basic) of 'Database.BeginTransaction(DbConnection)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CommitTransaction(System.Data.Common.DbTransaction)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1422">The 'this' parameter (or 'Me' in Visual Basic) of 'Database.CommitTransaction(DbTransaction)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConfigureParameter(System.Data.Common.DbParameter,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1501">In method 'Database.ConfigureParameter(DbParameter, string, DbType, int, ParameterDirection, bool, byte, byte, string, DataRowVersion, object)', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1502">In externally visible method 'Database.ConfigureParameter(DbParameter, string, DbType, int, ParameterDirection, bool, byte, byte, string, DataRowVersion, object)', validate parameter 'param' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateCommandByCommandType(System.Data.CommandType,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1274">The query string passed to 'DbCommand.CommandText.set(string)' in 'Database.CreateCommandByCommandType(CommandType, string)' could contain the following variables 'commandText'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DiscoverParameters(System.Data.Common.DbCommand)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1250">In externally visible method 'Database.DiscoverParameters(DbCommand)', validate parameter 'command' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteDataSet(System.Data.Common.DbCommand)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="459">In method 'Database.ExecuteDataSet(DbCommand)', object 'dataSet' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'dataSet' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteDataSet(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="475">In method 'Database.ExecuteDataSet(DbCommand, DbTransaction)', object 'dataSet' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'dataSet' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetParameterValue(System.Data.Common.DbCommand,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1156">In externally visible method 'Database.GetParameterValue(DbCommand, string)', validate parameter 'command' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStoredProcCommand(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="146">Correct the spelling of 'Proc' in member name 'Database.GetStoredProcCommand(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStoredProcCommand(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="162">Correct the spelling of 'Proc' in member name 'Database.GetStoredProcCommand(string, params object[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStoredProcCommandWithSourceColumns(System.String,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="191">Correct the spelling of 'Proc' in member name 'Database.GetStoredProcCommandWithSourceColumns(string, params string[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#instrumentationProvider" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Database.instrumentationProvider' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RollbackTransaction(System.Data.Common.DbTransaction)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1417">The 'this' parameter (or 'Me' in Visual Basic) of 'Database.RollbackTransaction(DbTransaction)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SameNumberOfParametersAndValues(System.Data.Common.DbCommand,System.Object[])" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1227">In externally visible method 'Database.SameNumberOfParametersAndValues(DbCommand, object[])', validate parameter 'command' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1228">In externally visible method 'Database.SameNumberOfParametersAndValues(DbCommand, object[])', validate parameter 'values' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetParameterValue(System.Data.Common.DbCommand,System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="1145">In externally visible method 'Database.SetParameterValue(DbCommand, string, object)', validate parameter 'command' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetUpRowUpdatedEvent(System.Data.Common.DbDataAdapter)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="Database.cs" Line="268">The compound word 'SetUp' in member name 'Database.SetUpRowUpdatedEvent(DbDataAdapter)' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DatabaseAssemblerAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Specify AttributeUsage on 'DatabaseAssemblerAttribute'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="DatabaseConfigurationView" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetConnectionStringSettings(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DatabaseConfigurationView.cs" Line="93">'configSection', a variable, is cast to type 'ConnectionStringsSection' multiple times in method 'DatabaseConfigurationView.GetConnectionStringSettings(string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDefaultMapping(System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DatabaseConfigurationView.cs" Line="169">The 'this' parameter (or 'Me' in Visual Basic) of 'DatabaseConfigurationView.GetDefaultMapping(string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetGenericMapping()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DatabaseConfigurationView.cs" Line="192">The 'this' parameter (or 'Me' in Visual Basic) of 'DatabaseConfigurationView.GetGenericMapping()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateInstanceName(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DatabaseConfigurationView.cs" Line="104">The 'this' parameter (or 'Me' in Visual Basic) of 'DatabaseConfigurationView.ValidateInstanceName(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DatabaseCustomFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetAssembler(System.Type,System.String,C0DEC0RE.ConfigurationReflectionCache)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DatabaseCustomFactory.cs" Line="55">In externally visible method 'DatabaseCustomFactory.GetAssembler(Type, string, ConfigurationReflectionCache)', validate parameter 'type' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DatabaseCustomFactory.cs" Line="52">In externally visible method 'DatabaseCustomFactory.GetAssembler(Type, string, ConfigurationReflectionCache)', validate parameter 'reflectionCache' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DatabaseFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TryLogConfigurationError(System.Configuration.ConfigurationErrorsException,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="DatabaseFactory.cs" Line="99">Modify 'DatabaseFactory.TryLogConfigurationError(ConfigurationErrorsException, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DatabaseSettings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetDatabaseSettings(C0DEC0RE.IConfigurationSource)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DatabaseSettings.cs" Line="49">In externally visible method 'DatabaseSettings.GetDatabaseSettings(IConfigurationSource)', validate parameter 'configurationSource' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DataInstrumentationInstaller" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#InitializeComponent()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DataInstrumentationInstaller.Designer.cs" Line="41">'DataInstrumentationInstaller.InitializeComponent()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DataInstrumentationProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FireCommandExecutedEvent(System.DateTime)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DataInstrumentationProvider.cs" Line="59">Consider making 'DataInstrumentationProvider.FireCommandExecutedEvent(DateTime)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FireCommandFailedEvent(System.String,System.String,System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DataInstrumentationProvider.cs" Line="70">Consider making 'DataInstrumentationProvider.FireCommandFailedEvent(string, string, Exception)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FireConnectionFailedEvent(System.String,System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DataInstrumentationProvider.cs" Line="88">Consider making 'DataInstrumentationProvider.FireConnectionFailedEvent(string, Exception)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FireConnectionOpenedEvent()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DataInstrumentationProvider.cs" Line="78">Consider making 'DataInstrumentationProvider.FireConnectionOpenedEvent()' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#commandExecuted" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="command" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'command' in member name 'DataInstrumentationProvider.commandExecuted' by changing it to 'Command'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#commandFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="command" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'command' in member name 'DataInstrumentationProvider.commandFailed' by changing it to 'Command'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#connectionFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="connection" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'connection' in member name 'DataInstrumentationProvider.connectionFailed' by changing it to 'Connection'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#connectionOpened" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="connection" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'connection' in member name 'DataInstrumentationProvider.connectionOpened' by changing it to 'Connection'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DbConnectionInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMDataConfig.cs" Line="25">Call the 'ArgumentNullException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConnectionName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_ConnectionName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMDataConfig.cs" Line="33">Call the 'ArgumentNullException' constructor that contains a message and/or paramName parameter.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ConnectionString" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_ConnectionString(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMDataConfig.cs" Line="40">Call the 'ArgumentNullException' constructor that contains a message and/or paramName parameter.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SetConnectionString(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMDataConfig.cs" Line="87">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'DbConnectionInfo.SetConnectionString(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMDataConfig.cs" Line="89">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'DbConnectionInfo.SetConnectionString(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DefaultCreationPolicy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetParameters(C0DEC0RE.IBuilderContext,System.Type,System.String,System.Reflection.ConstructorInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DefaultCreationPolicy.cs" Line="46">In externally visible method 'DefaultCreationPolicy.GetParameters(IBuilderContext, Type, string, ConstructorInfo)', validate parameter 'context' before using it.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DefaultCreationPolicy.cs" Line="42">In externally visible method 'DefaultCreationPolicy.GetParameters(IBuilderContext, Type, string, ConstructorInfo)', validate parameter 'constructor' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectConstructor(C0DEC0RE.IBuilderContext,System.Type,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="DefaultCreationPolicy.cs" Line="28">In member 'DefaultCreationPolicy.SelectConstructor(IBuilderContext, Type, string)', change parameter name 'typeToBuild' to 'type' in order to match the identifier as it has been declared in 'ICreationPolicy.SelectConstructor(IBuilderContext, Type, string)'.</Issue>
            </Message>
            <Message Id="2#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="DefaultCreationPolicy.cs" Line="28">In member 'DefaultCreationPolicy.SelectConstructor(IBuilderContext, Type, string)', change parameter name 'idToBuild' to 'id' in order to match the identifier as it has been declared in 'ICreationPolicy.SelectConstructor(IBuilderContext, Type, string)'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DefaultCreationPolicy.cs" Line="29">In externally visible method 'DefaultCreationPolicy.SelectConstructor(IBuilderContext, Type, string)', validate parameter 'typeToBuild' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DefaultDataEventLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LogConfigurationError(System.Exception,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DefaultDataEventLogger.cs" Line="51">In externally visible method 'DefaultDataEventLogger.LogConfigurationError(Exception, string)', validate parameter 'exception' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DefaultDataEventLoggerCustomFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DoCreateObject(C0DEC0RE.InstrumentationConfigurationSection)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DefaultDataEventLoggerCustomFactory.cs" Line="29">In externally visible method 'DefaultDataEventLoggerCustomFactory.DoCreateObject(InstrumentationConfigurationSection)', validate parameter 'instrumentationConfigurationSection' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DefaultEventLoggerCustomFactoryBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetConfiguration(C0DEC0RE.IConfigurationSource)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="DefaultEventLoggerCustomFactoryBase.cs" Line="49">The 'this' parameter (or 'Me' in Visual Basic) of 'DefaultEventLoggerCustomFactoryBase.GetConfiguration(IConfigurationSource)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DependencyAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateParameter(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="DependencyAttribute.cs" Line="79">In member 'DependencyAttribute.CreateParameter(Type)', change parameter name 'annotatedMemberType' to 'memberType' in order to match the identifier as it has been declared in 'ParameterAttribute.CreateParameter(Type)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DependencyResolutionLocatorKey" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="DependencyResolutionLocatorKey.cs" Line="50">Correct the casing of 'ID' in member name 'DependencyResolutionLocatorKey.ID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="DependencyResolutionLocatorKey.cs" Line="58">The property name 'DependencyResolutionLocatorKey.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DictionaryConfigurationSource" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'DictionaryConfigurationSource' because it creates members of the following IDisposable types: 'EventHandlerList'. If 'DictionaryConfigurationSource' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#eventHandlers" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DictionaryConfigurationSource.eventHandlers' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#sections" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DictionaryConfigurationSource.sections' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnterpriseLibraryBuilderStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetConfigurationSource(C0DEC0RE.IBuilderContext)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryBuilderStrategy.cs" Line="29">The 'this' parameter (or 'Me' in Visual Basic) of 'EnterpriseLibraryBuilderStrategy.GetConfigurationSource(IBuilderContext)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryBuilderStrategy.cs" Line="30">In externally visible method 'EnterpriseLibraryBuilderStrategy.GetConfigurationSource(IBuilderContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetReflectionCache(C0DEC0RE.IBuilderContext)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryBuilderStrategy.cs" Line="46">The 'this' parameter (or 'Me' in Visual Basic) of 'EnterpriseLibraryBuilderStrategy.GetReflectionCache(IBuilderContext)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryBuilderStrategy.cs" Line="47">In externally visible method 'EnterpriseLibraryBuilderStrategy.GetReflectionCache(IBuilderContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnterpriseLibraryFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryFactory.cs" Line="49">Initialize all static fields in 'EnterpriseLibraryFactory' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUp`1()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryFactory.cs" Line="70">The compound word 'BuildUp' in member name 'EnterpriseLibraryFactory.BuildUp&lt;T&gt;()' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUp`1(C0DEC0RE.IConfigurationSource)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryFactory.cs" Line="96">The compound word 'BuildUp' in member name 'EnterpriseLibraryFactory.BuildUp&lt;T&gt;(IConfigurationSource)' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUp`1(C0DEC0RE.IReadWriteLocator)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryFactory.cs" Line="84">The compound word 'BuildUp' in member name 'EnterpriseLibraryFactory.BuildUp&lt;T&gt;(IReadWriteLocator)' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUp`1(C0DEC0RE.IReadWriteLocator,C0DEC0RE.IConfigurationSource)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryFactory.cs" Line="111">The compound word 'BuildUp' in member name 'EnterpriseLibraryFactory.BuildUp&lt;T&gt;(IReadWriteLocator, IConfigurationSource)' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUp`1(C0DEC0RE.IReadWriteLocator,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryFactory.cs" Line="154">The compound word 'BuildUp' in member name 'EnterpriseLibraryFactory.BuildUp&lt;T&gt;(IReadWriteLocator, string)' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUp`1(C0DEC0RE.IReadWriteLocator,System.String,C0DEC0RE.IConfigurationSource)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryFactory.cs" Line="170">The compound word 'BuildUp' in member name 'EnterpriseLibraryFactory.BuildUp&lt;T&gt;(IReadWriteLocator, string, IConfigurationSource)' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUp`1(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryFactory.cs" Line="126">The compound word 'BuildUp' in member name 'EnterpriseLibraryFactory.BuildUp&lt;T&gt;(string)' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUp`1(System.String,C0DEC0RE.IConfigurationSource)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryFactory.cs" Line="139">The compound word 'BuildUp' in member name 'EnterpriseLibraryFactory.BuildUp&lt;T&gt;(string, IConfigurationSource)' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnterpriseLibraryPerformanceCounter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.String,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryPerformanceCounter.cs" Line="58">In externally visible method 'EnterpriseLibraryPerformanceCounter.EnterpriseLibraryPerformanceCounter(string, string, params string[])', validate parameter 'instanceNames' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Counters" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryPerformanceCounter.cs" Line="33">Change 'EnterpriseLibraryPerformanceCounter.Counters' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#instanceNames" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'EnterpriseLibraryPerformanceCounter.instanceNames' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnterpriseLibraryPerformanceCounterFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateCounter(System.String,System.String,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryPerformanceCounterFactory.cs" Line="38">In method 'EnterpriseLibraryPerformanceCounterFactory.CreateCounter(string, string, string[])', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryPerformanceCounterFactory.cs" Line="38">In method 'EnterpriseLibraryPerformanceCounterFactory.CreateCounter(string, string, string[])', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryPerformanceCounterFactory.cs" Line="43">In method 'EnterpriseLibraryPerformanceCounterFactory.CreateCounter(string, string, string[])', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryPerformanceCounterFactory.cs" Line="38">In externally visible method 'EnterpriseLibraryPerformanceCounterFactory.CreateCounter(string, string, string[])', validate parameter 'categoryName' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryPerformanceCounterFactory.cs" Line="38">In externally visible method 'EnterpriseLibraryPerformanceCounterFactory.CreateCounter(string, string, string[])', validate parameter 'counterName' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EnterpriseLibraryPerformanceCounterFactory.cs" Line="40">In externally visible method 'EnterpriseLibraryPerformanceCounterFactory.CreateCounter(string, string, string[])', validate parameter 'instanceNames' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EventBinder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Bind(System.Reflection.EventInfo,System.Reflection.MethodInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EventBinder.cs" Line="46">In externally visible method 'EventBinder.Bind(EventInfo, MethodInfo)', validate parameter 'sourceEvent' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EventLogEntryFormatter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#emptyExtraInformation" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'EventLogEntryFormatter.emptyExtraInformation' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EntryTemplate" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EventLogEntryFormatter.cs" Line="121">The 'this' parameter (or 'Me' in Visual Basic) of 'EventLogEntryFormatter.EntryTemplate' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_EntryTemplate()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EventLogEntryFormatter.cs" Line="121">'EventLogEntryFormatter.EntryTemplate.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="EventLogInstallerBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateInstallers(System.Collections.Generic.ICollection`1&lt;System.Type&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EventLogInstallerBuilder.cs" Line="50">In method 'EventLogInstallerBuilder.CreateInstallers(ICollection&lt;Type&gt;)', object 'installer' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'installer' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="EventLogInstallerBuilder.cs" Line="45">In externally visible method 'EventLogInstallerBuilder.CreateInstallers(ICollection&lt;Type&gt;)', validate parameter 'instrumentedTypes' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExplicitInstrumentationAttacher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Attacher" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Attacher' in type name 'ExplicitInstrumentationAttacher'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="FileConfigurationSource" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filepath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="FileConfigurationSource.cs" Line="39">In method 'FileConfigurationSource.FileConfigurationSource(string)', correct the spelling of 'Filepath' in parameter name 'configurationFilepath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(C0DEC0RE.IConfigurationParameter,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="FileConfigurationSource.cs" Line="184">Method 'FileConfigurationSource.Remove(IConfigurationParameter, string)' passes 'saveParameter' as the 'paramName' argument to a 'ArgumentException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="FileConfigurationSource.cs" Line="139">The 'this' parameter (or 'Me' in Visual Basic) of 'FileConfigurationSource.Remove(string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResetImplementation(System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="FileConfigurationSource.cs" Line="194">In method 'FileConfigurationSource.ResetImplementation(string, bool)', call System.IDisposable.Dispose on object 'new FileConfigurationSourceImplementation(rootedConfigurationFilepath, refreshing)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateConnectionStrings(System.String,System.Configuration.ConfigurationSection,System.Configuration.Configuration)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="FileConfigurationSource.cs" Line="112">The 'this' parameter (or 'Me' in Visual Basic) of 'FileConfigurationSource.UpdateConnectionStrings(string, ConfigurationSection, Configuration)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileConfigurationSourceImplementation" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filepath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="FileConfigurationSourceImplementation.cs" Line="34">In method 'FileConfigurationSourceImplementation.FileConfigurationSourceImplementation(string)', correct the spelling of 'Filepath' in parameter name 'configurationFilepath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filepath" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="FileConfigurationSourceImplementation.cs" Line="28">In method 'FileConfigurationSourceImplementation.FileConfigurationSourceImplementation(string, bool)', correct the spelling of 'Filepath' in parameter name 'configurationFilepath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#configurationFilepath" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'FileConfigurationSourceImplementation.configurationFilepath' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RefreshAndValidateSections(System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;,System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;,System.Collections.Generic.ICollection`1&lt;System.String&gt;&amp;,System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="FileConfigurationSourceImplementation.cs" Line="86">In externally visible method 'FileConfigurationSourceImplementation.RefreshAndValidateSections(IDictionary&lt;string, string&gt;, IDictionary&lt;string, string&gt;, out ICollection&lt;string&gt;, out IDictionary&lt;string, string&gt;)', validate parameter 'localSectionsToRefresh' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="FileConfigurationSourceImplementation.cs" Line="100">In externally visible method 'FileConfigurationSourceImplementation.RefreshAndValidateSections(IDictionary&lt;string, string&gt;, IDictionary&lt;string, string&gt;, out ICollection&lt;string&gt;, out IDictionary&lt;string, string&gt;)', validate parameter 'externalSectionsToRefresh' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="FileConfigurationSourceImplementation.cs" Line="96">In externally visible method 'FileConfigurationSourceImplementation.RefreshAndValidateSections(IDictionary&lt;string, string&gt;, IDictionary&lt;string, string&gt;, out ICollection&lt;string&gt;, out IDictionary&lt;string, string&gt;)', validate local variable ''(*sectionsToNotify)'', which was reassigned from parameter 'sectionsToNotify', before using it.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="FileConfigurationSourceImplementation.cs" Line="92">In externally visible method 'FileConfigurationSourceImplementation.RefreshAndValidateSections(IDictionary&lt;string, string&gt;, IDictionary&lt;string, string&gt;, out ICollection&lt;string&gt;, out IDictionary&lt;string, string&gt;)', validate local variable ''(*sectionsWithChangedConfigSource)'', which was reassigned from parameter 'sectionsWithChangedConfigSource', before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GenericDatabaseAssembler" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Assemble(System.String,System.Configuration.ConnectionStringSettings,C0DEC0RE.IConfigurationSource)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="GenericDatabaseAssembler.cs" Line="26">In externally visible method 'GenericDatabaseAssembler.Assemble(string, ConnectionStringSettings, IConfigurationSource)', validate parameter 'connectionStringSettings' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IBuilder`1" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildUp(C0DEC0RE.IReadWriteLocator,System.Type,System.String,System.Object,C0DEC0RE.PolicyList[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'BuildUp' in member name 'IBuilder&lt;TStageEnum&gt;.BuildUp(IReadWriteLocator, Type, string, object, params PolicyList[])' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUp`1(C0DEC0RE.IReadWriteLocator,System.String,System.Object,C0DEC0RE.PolicyList[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'BuildUp' in member name 'IBuilder&lt;TStageEnum&gt;.BuildUp&lt;TTypeToBuild&gt;(IReadWriteLocator, string, object, params PolicyList[])' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TearDown`1(C0DEC0RE.IReadWriteLocator,!!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'TearDown' in member name 'IBuilder&lt;TStageEnum&gt;.TearDown&lt;TItem&gt;(IReadWriteLocator, TItem)' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IBuilderPolicy" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IBuilderPolicy'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IBuilderStrategy" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildUp(C0DEC0RE.IBuilderContext,System.Type,System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BuildUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'BuildUp' in member name 'IBuilderStrategy.BuildUp(IBuilderContext, Type, object, string)' exists as a discrete term. If your usage is intended to be single word, case it as 'Buildup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TearDown(C0DEC0RE.IBuilderContext,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'TearDown' in member name 'IBuilderStrategy.TearDown(IBuilderContext, object)' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IConfigurationParameter" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IConfigurationParameter'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IHelperAssistedCustomConfigurationData`1" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Property" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error">In virtual/interface member 'IHelperAssistedCustomConfigurationData&lt;T&gt;.BaseGetPropertyValue(ConfigurationProperty)', rename parameter 'property' so that it no longer conflicts with the reserved language keyword 'Property'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Property" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error">In virtual/interface member 'IHelperAssistedCustomConfigurationData&lt;T&gt;.BaseSetPropertyValue(ConfigurationProperty, object)', rename parameter 'property' so that it no longer conflicts with the reserved language keyword 'Property'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IInstrumentationAttacher" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Attacher" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Attacher' in type name 'IInstrumentationAttacher'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IInstrumentationEventProvider" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetInstrumentationEventProvider()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'IInstrumentationEventProvider.GetInstrumentationEventProvider()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ILifetimeContainer" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ILifetimeContainer' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IniFile" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ini' in type name 'IniFile'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Foot" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Foot(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="483">Replace the call to 'string.operator ==(string, string)' in 'IniFile.Foot.set(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="499">Replace the call to 'string.operator ==(string, string)' in 'IniFile.Foot.set(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Format(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="398">'el', a variable, is cast to type 'IniFileSectionStart' multiple times in method 'IniFile.Format(bool)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
            <Message Id="Intendation" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="384">In method 'IniFile.Format(bool)', correct the spelling of 'Intendation' in parameter name 'preserveIntendation' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FromElements(System.Collections.Generic.IEnumerable`1&lt;C0DEC0RE.IniFileElement&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="333">'el', a variable, is cast to type 'IniFileSectionStart' multiple times in method 'IniFile.FromElements(IEnumerable&lt;IniFileElement&gt;)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="elemes" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="321">In method 'IniFile.FromElements(IEnumerable&lt;IniFileElement&gt;)', correct the spelling of 'elemes' in parameter name 'elemes' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="338">Replace the call to 'string.operator ==(string, string)' in 'IniFile.FromElements(IEnumerable&lt;IniFileElement&gt;)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FromFile(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="313">In method 'IniFile.FromFile(string)', object 'reader' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'reader' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FromStream(C0DEC0RE.IniFileReader)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="352">In externally visible method 'IniFile.FromStream(IniFileReader)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getSection(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="291">In method 'IniFile.getSection(string)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="293">In method 'IniFile.getSection(string)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Header" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Header(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="463">Replace the call to 'string.operator !=(string, string)' in 'IniFile.Header.set(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="455">Replace the call to 'string.operator ==(string, string)' in 'IniFile.Header.set(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Save(C0DEC0RE.IniFileWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="364">In externally visible method 'IniFile.Save(IniFileWriter)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="357">In method 'IniFile.Save(string)', object 'writer' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'writer' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IniFileBlankLine" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ini' in type name 'IniFileBlankLine'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Amount" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Amount(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="279">Method 'IniFileBlankLine.Amount.set(int)' passes 'Cannot set Amount to less than 1.' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#IsLineValid(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="289">In member 'IniFileBlankLine.IsLineValid(string)', consider replacing the data type identifier 'String' in parameter name 'testString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="290">Replace the call to 'string.operator ==(string, string)' in 'IniFileBlankLine.IsLineValid(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="295">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'IniFileBlankLine.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IniFileCommentary" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ini' in type name 'IniFileCommentary'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CommentChars" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="319">Correct the spelling of the unrecognized token 'CommentChars' in the literal '"Comments are disabled. Set the IniFileSettings.CommentChars property to turn the..."'.</Issue>
            </Message>
            <Message Id="IniFileSettings" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="319">Correct the spelling of the unrecognized token 'IniFileSettings' in the literal '"Comments are disabled. Set the IniFileSettings.CommentChars property to turn the..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FromComment(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CommentChars" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="373">Correct the spelling of the unrecognized token 'CommentChars' in the literal '"Comments are disabled. Set the IniFileSettings.CommentChars property to turn the..."'.</Issue>
            </Message>
            <Message Id="IniFileSettings" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="373">Correct the spelling of the unrecognized token 'IniFileSettings' in the literal '"Comments are disabled. Set the IniFileSettings.CommentChars property to turn the..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsLineValid(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="360">In member 'IniFileCommentary.IsLineValid(string)', consider replacing the data type identifier 'String' in parameter name 'testString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="361">In externally visible method 'IniFileCommentary.IsLineValid(string)', validate parameter 'testString' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IniFileElement" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ini' in type name 'IniFileElement'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Member" Certainty="95" Level="Error">Change member names 'Formatting' and 'formatting' so that they differ by more than case.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="23">In member 'IniFileElement.IniFileElement(string)', remove the underscores from parameter name '_content'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="35">In externally visible method 'IniFileElement.IniFileElement(string)', validate parameter '_content' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#formatting" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'IniFileElement.formatting' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Intendation" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Intendation" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="48">Correct the spelling of 'Intendation' in member name 'IniFileElement.Intendation' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#set_Intendation(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="58">In externally visible method 'IniFileElement.Intendation.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IniFileLight" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ini' in type name 'IniFileLight'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileLight.cs" Line="29">In method 'IniFileLight.IniFileLight(string)', object 'reader' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'reader' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#COMMENT_START_1" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'IniFileLight.COMMENT_START_1' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#COMMENT_START_2" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'IniFileLight.COMMENT_START_2' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EQUALITY_SIGN" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'IniFileLight.EQUALITY_SIGN' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileLight.cs" Line="122">In method 'IniFileLight.Save(string)', object 'writer' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'writer' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SECTION_CLOSE_BRACKET" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'IniFileLight.SECTION_CLOSE_BRACKET' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SECTION_OPEN_BRACKET" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'IniFileLight.SECTION_OPEN_BRACKET' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Sections" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileLight.cs" Line="110">Consider a design where 'IniFileLight.Sections' doesn't nest generic type 'Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IniFileReader" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ini' in type name 'IniFileReader'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="39">In method 'IniFileReader.IniFileReader(Stream)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.Stream,System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="enc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="39">In method 'IniFileReader.IniFileReader(Stream, Encoding)', correct the spelling of 'enc' in parameter name 'enc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="39">In method 'IniFileReader.IniFileReader(Stream, Encoding)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="enc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="39">In method 'IniFileReader.IniFileReader(string, Encoding)', correct the spelling of 'enc' in parameter name 'enc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GotoSection(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="120">In method 'IniFileReader.GotoSection(string)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GotoValue(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="187">In method 'IniFileReader.GotoValue(string, bool)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="187">In method 'IniFileReader.GotoValue(string, bool)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="187">In externally visible method 'IniFileReader.GotoValue(string, bool)', validate parameter 'key' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseText(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="79">'currEl', a variable, is cast to type 'IniFileCommentary' multiple times in method 'IniFileReader.ParseText(string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="75">'lastEl', a variable, is cast to type 'IniFileBlankLine' multiple times in method 'IniFileReader.ParseText(string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="79">'lastEl', a variable, is cast to type 'IniFileCommentary' multiple times in method 'IniFileReader.ParseText(string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="64">Change 'List&lt;IniFileElement&gt;' in 'IniFileReader.ParseText(string)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadElementsToEnd()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="101">Change 'List&lt;IniFileElement&gt;' in 'IniFileReader.ReadElementsToEnd()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadSection()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="131">Change 'List&lt;IniFileElement&gt;' in 'IniFileReader.ReadSection()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="GotoSection" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="133">Correct the spelling of the unrecognized token 'GotoSection' in the literal '"The current position of the reader must be at IniFileSectionStart. Use GotoSecti..."'.</Issue>
            </Message>
            <Message Id="IniFileSectionStart" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="133">Correct the spelling of the unrecognized token 'IniFileSectionStart' in the literal '"The current position of the reader must be at IniFileSectionStart. Use GotoSecti..."'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="145">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'IniFileReader.ReadSection()' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadSectionValues()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="158">Change 'List&lt;IniFileValue&gt;' in 'IniFileReader.ReadSectionValues()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IniFileSection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ini' in type name 'IniFileSection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Comment" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="SameType" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="531">The property name 'IniFileSection.Comment' is confusing given the existence of method 'IniFileSection.GetComment(string)'. Rename or remove one of these members.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Comment()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="531">Replace the call to 'string.operator ==(string, string)' in 'IniFileSection.Comment.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Comment(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="535">Replace the call to 'string.operator !=(string, string)' in 'IniFileSection.Comment.set(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Format(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Intendation" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="739">In method 'IniFileSection.Format(bool)', correct the spelling of 'Intendation' in parameter name 'preserveIntendation' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetKeys()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="724">Change 'IniFileSection.GetKeys()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getValue(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="569">In method 'IniFileSection.getValue(string)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="574">In method 'IniFileSection.getValue(string)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InlineComment" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="SameType" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="603">The property name 'IniFileSection.InlineComment' is confusing given the existence of method 'IniFileSection.GetInlineComment(string)'. Rename or remove one of these members.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.String,System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IndexersShouldNotBeMultidimensional" Category="Microsoft.Design" CheckId="CA1023" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="662">Redesign indexer 'IniFileSection.this[string, string]' to use a single string or integer value as its index.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Item(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="664">Replace the call to 'string.operator ==(string, string)' in 'IniFileSection.this.get(string, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Item(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="defaultValue" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="668">Parameter 'defaultValue' of 'IniFileSection.this.set(string, string, string)' is never used. Remove the parameter or use it in the method body.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#setComment(C0DEC0RE.IniFileElement,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="CommentChars" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="543">Correct the spelling of the unrecognized token 'CommentChars' in the literal '"Comments are currently disabled. Setup ConfigFileSettings.CommentChars property ..."'.</Issue>
            </Message>
            <Message Id="ConfigFileSettings" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="543">Correct the spelling of the unrecognized token 'ConfigFileSettings' in the literal '"Comments are currently disabled. Setup ConfigFileSettings.CommentChars property ..."'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="554">Replace the call to 'string.operator !=(string, string)' in 'IniFileSection.setComment(IniFileElement, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="547">Replace the call to 'string.operator ==(string, string)' in 'IniFileSection.setComment(IniFileElement, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#setValue(System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="684">'el', a variable, is cast to type 'IniFileValue' multiple times in method 'IniFileSection.setValue(string, string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="734">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'IniFileSection.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IniFileSectionStart" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ini' in type name 'IniFileSectionStart'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="121">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'IniFileSectionStart.IniFileSectionStart(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="128">Because the behavior of 'string.LastIndexOf(string)' could vary based on the current user's locale settings, replace this call in 'IniFileSectionStart.IniFileSectionStart(string)' with a call to 'string.LastIndexOf(string, StringComparison)'. If the result of 'string.LastIndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExtractFormat(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="comChar" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="207">'IniFileSectionStart.ExtractFormat(string)' declares a variable, 'comChar', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="192">In externally visible method 'IniFileSectionStart.ExtractFormat(string)', validate parameter 'content' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Format(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="237">In externally visible method 'IniFileSectionStart.Format(string)', validate parameter 'formatting' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#inlineCommentChar" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'IniFileSectionStart.inlineCommentChar' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsLineValid(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="162">In member 'IniFileSectionStart.IsLineValid(string)', consider replacing the data type identifier 'String' in parameter name 'testString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="163">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'IniFileSectionStart.IsLineValid(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="163">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'IniFileSectionStart.IsLineValid(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="163">In externally visible method 'IniFileSectionStart.IsLineValid(string)', validate parameter 'testString' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IniFileSettings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ini' in type name 'IniFileSettings'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CommentChars" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="886">Change 'IniFileSettings.CommentChars' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#set_CommentChars(System.String[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="890">Method 'IniFileSettings.CommentChars.set(string[])' passes 'CommentChars' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#DefaultSectionFormatting" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_DefaultSectionFormatting(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="908">Method 'IniFileSettings.DefaultSectionFormatting.set(string)' passes 'DefaultSectionFormatting' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#DefaultValueFormatting" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_DefaultValueFormatting(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="927">Method 'IniFileSettings.DefaultValueFormatting.set(string)' passes 'DefaultValueFormatting' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#EqualsString" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_EqualsString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="958">Method 'IniFileSettings.EqualsString.set(string)' passes 'EqualsString' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#indexOfAny(System.String,System.String[])" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="1022">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'IniFileSettings.indexOfAny(string, string[])' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SectionCloseBracket" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_SectionCloseBracket(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="877">Method 'IniFileSettings.SectionCloseBracket.set(string)' passes 'SectionCloseBracket' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SectionOpenBracket" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_SectionOpenBracket(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="947">Method 'IniFileSettings.SectionOpenBracket.set(string)' passes 'SectionCloseBracket' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#startsWith(System.String,System.String[])" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="1005">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'IniFileSettings.startsWith(string, string[])' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#trimLeft(System.String&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="971">'IniFileSettings.trimLeft(ref string)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#trimRight(System.String&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="985">'IniFileSettings.trimRight(ref string)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IniFileValue" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ini' in type name 'IniFileValue'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CreateNew(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="key" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="571">'key', a parameter declared in 'IniFileValue.CreateNew(string, string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
            <Message Id="value" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="571">'value', a parameter declared in 'IniFileValue.CreateNew(string, string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExtractFormat(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="475">The 'this' parameter (or 'Me' in Visual Basic) of 'IniFileValue.ExtractFormat(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="comChar" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="501">'IniFileValue.ExtractFormat(string)' declares a variable, 'comChar', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="481">In externally visible method 'IniFileValue.ExtractFormat(string)', validate parameter 'content' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Format(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="540">In externally visible method 'IniFileValue.Format(string)', validate parameter 'formatting' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InlineComment" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_InlineComment(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="461">'value', a parameter declared in 'IniFileValue.InlineComment.set(string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#IsLineValid(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="587">In member 'IniFileValue.IsLineValid(string)', consider replacing the data type identifier 'String' in parameter name 'testString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="588">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'IniFileValue.IsLineValid(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="588">In externally visible method 'IniFileValue.IsLineValid(string)', validate parameter 'testString' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Key" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Key(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="448">'value', a parameter declared in 'IniFileValue.Key.set(string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Set(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="key" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="593">'key', a parameter declared in 'IniFileValue.Set(string, string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
            <Message Id="value" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="593">'value', a parameter declared in 'IniFileValue.Set(string, string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Value" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Value(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFileElement.cs" Line="454">'value', a parameter declared in 'IniFileValue.Value.set(string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="IniFileWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ini' in type name 'IniFileWriter'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="201">In method 'IniFileWriter.IniFileWriter(Stream)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.Stream,System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="enc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="209">In method 'IniFileWriter.IniFileWriter(Stream, Encoding)', correct the spelling of 'enc' in parameter name 'enc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="209">In method 'IniFileWriter.IniFileWriter(Stream, Encoding)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="205">In method 'IniFileWriter.IniFileWriter(string)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="213">In method 'IniFileWriter.IniFileWriter(string, bool)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteElement(C0DEC0RE.IniFileElement)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="223">'element', a parameter, is cast to type 'IniFileValue' multiple times in method 'IniFileWriter.WriteElement(IniFileElement)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="223">Replace the call to 'string.operator ==(string, string)' in 'IniFileWriter.WriteElement(IniFileElement)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="221">In externally visible method 'IniFileWriter.WriteElement(IniFileElement)', validate parameter 'element' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteElements(System.Collections.Generic.IEnumerable`1&lt;C0DEC0RE.IniFileElement&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="234">In externally visible method 'IniFileWriter.WriteElements(IEnumerable&lt;IniFileElement&gt;)', validate parameter 'elements' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteIniFile(C0DEC0RE.IniFile)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ini" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="240">Correct the spelling of 'Ini' in member name 'IniFileWriter.WriteIniFile(IniFile)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="241">In externally visible method 'IniFileWriter.WriteIniFile(IniFile)', validate parameter 'file' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteSection(C0DEC0RE.IniFileSection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="IniFiles.cs" Line="247">In externally visible method 'IniFileWriter.WriteSection(IniFileSection)', validate parameter 'section' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InjectionConstructorAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'InjectionConstructorAttribute', if possible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="InstrumentationAttacherFactory" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetInstrumentationListenerAttribute(System.Object,C0DEC0RE.ConfigurationReflectionCache)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationAttacherFactory.cs" Line="33">The 'this' parameter (or 'Me' in Visual Basic) of 'InstrumentationAttacherFactory.GetInstrumentationListenerAttribute(object, ConfigurationReflectionCache)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InstrumentationAttachmentStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AttachInstrumentation(C0DEC0RE.InstrumentationAttachmentStrategy+ArgumentGenerator,System.Object,C0DEC0RE.IConfigurationSource,C0DEC0RE.ConfigurationReflectionCache)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationAttachmentStrategy.cs" Line="73">'createdObject', a parameter, is cast to type 'IInstrumentationEventProvider' multiple times in method 'InstrumentationAttachmentStrategy.AttachInstrumentation(InstrumentationAttachmentStrategy.ArgumentGenerator, object, IConfigurationSource, ConfigurationReflectionCache)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AttachInstrumentation(System.Object,C0DEC0RE.IConfigurationSource,C0DEC0RE.ConfigurationReflectionCache)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationAttachmentStrategy.cs" Line="43">In member 'InstrumentationAttachmentStrategy.AttachInstrumentation(object, IConfigurationSource, ConfigurationReflectionCache)', consider replacing the data type identifier 'Object' in parameter name 'createdObject' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AttachInstrumentation(System.String,System.Object,C0DEC0RE.IConfigurationSource,C0DEC0RE.ConfigurationReflectionCache)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationAttachmentStrategy.cs" Line="59">In member 'InstrumentationAttachmentStrategy.AttachInstrumentation(string, object, IConfigurationSource, ConfigurationReflectionCache)', consider replacing the data type identifier 'Object' in parameter name 'createdObject' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetConfigurationSection(C0DEC0RE.IConfigurationSource)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationAttachmentStrategy.cs" Line="88">The 'this' parameter (or 'Me' in Visual Basic) of 'InstrumentationAttachmentStrategy.GetConfigurationSection(IConfigurationSource)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InstrumentationBaseAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'InstrumentationBaseAttribute', if possible.</Issue>
          </Message>
          <Message TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Specify AttributeUsage on 'InstrumentationBaseAttribute'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationBaseAttribute.cs" Line="31">Method 'InstrumentationBaseAttribute.InstrumentationBaseAttribute(string)' passes parameter name 'subjectName' as the 'message' argument to a 'ArgumentException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InstrumentationListener" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Boolean,System.Boolean,System.Boolean,C0DEC0RE.IPerformanceCounterNameFormatter)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationListener.cs" Line="70">'InstrumentationListener.InstrumentationListener(bool, bool, bool, IPerformanceCounterNameFormatter)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;InstrumentationListener..ctor(Boolean, Boolean, Boolean, IPerformanceCounterNameFormatter)&#xD;&#xA;InstrumentationListener.Initialize(Boolean, Boolean, Boolean, IPerformanceCounterNameFormatter, String[]):Void&#xD;&#xA;InstrumentationListener.CreatePerformanceCounters(String[]):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String[],System.Boolean,System.Boolean,System.Boolean,C0DEC0RE.IPerformanceCounterNameFormatter)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationListener.cs" Line="104">'InstrumentationListener.InstrumentationListener(string[], bool, bool, bool, IPerformanceCounterNameFormatter)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;InstrumentationListener..ctor(String[], Boolean, Boolean, Boolean, IPerformanceCounterNameFormatter)&#xD;&#xA;InstrumentationListener.Initialize(Boolean, Boolean, Boolean, IPerformanceCounterNameFormatter, String[]):Void&#xD;&#xA;InstrumentationListener.CreatePerformanceCounters(String[]):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FormatCounterInstanceNames(C0DEC0RE.IPerformanceCounterNameFormatter,System.String[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationListener.cs" Line="144">The 'this' parameter (or 'Me' in Visual Basic) of 'InstrumentationListener.FormatCounterInstanceNames(IPerformanceCounterNameFormatter, string[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="nameFormatter" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationListener.cs" Line="144">'nameFormatter', a parameter declared in 'InstrumentationListener.FormatCounterInstanceNames(IPerformanceCounterNameFormatter, string[])', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEventSourceName()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationListener.cs" Line="118">Change 'InstrumentationListener.GetEventSourceName()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Initialize(System.Boolean,System.Boolean,System.Boolean,C0DEC0RE.IPerformanceCounterNameFormatter,System.String[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="eventLoggingEnabled" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationListener.cs" Line="130">'eventLoggingEnabled', a parameter declared in 'InstrumentationListener.Initialize(bool, bool, bool, IPerformanceCounterNameFormatter, string[])', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
            <Message Id="nameFormatter" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationListener.cs" Line="130">'nameFormatter', a parameter declared in 'InstrumentationListener.Initialize(bool, bool, bool, IPerformanceCounterNameFormatter, string[])', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
            <Message Id="performanceCountersEnabled" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationListener.cs" Line="130">'performanceCountersEnabled', a parameter declared in 'InstrumentationListener.Initialize(bool, bool, bool, IPerformanceCounterNameFormatter, string[])', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
            <Message Id="wmiEnabled" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationListener.cs" Line="130">'wmiEnabled', a parameter declared in 'InstrumentationListener.Initialize(bool, bool, bool, IPerformanceCounterNameFormatter, string[])', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InstrumentationStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildUp(C0DEC0RE.IBuilderContext,System.Type,System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationStrategy.cs" Line="37">In member 'InstrumentationStrategy.BuildUp(IBuilderContext, Type, object, string)', change parameter name 't' to 'typeToBuild' in order to match the identifier as it has been declared in 'BuilderStrategy.BuildUp(IBuilderContext, Type, object, string)'.</Issue>
            </Message>
            <Message Id="3#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="InstrumentationStrategy.cs" Line="37">In member 'InstrumentationStrategy.BuildUp(IBuilderContext, Type, object, string)', change parameter name 'id' to 'idToBuild' in order to match the identifier as it has been declared in 'BuilderStrategy.BuildUp(IBuilderContext, Type, object, string)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IReadableLocator" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'IReadableLocator' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#FindBy(C0DEC0RE.SearchMode,System.Predicate`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IReadableLocator.FindBy(SearchMode, Predicate&lt;KeyValuePair&lt;object, object&gt;&gt;)' doesn't nest generic type 'Predicate&lt;KeyValuePair&lt;object, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindBy(System.Predicate`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IReadableLocator.FindBy(Predicate&lt;KeyValuePair&lt;object, object&gt;&gt;)' doesn't nest generic type 'Predicate&lt;KeyValuePair&lt;object, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IReadableLocator.Get(object)' so that it no longer conflicts with the reserved language keyword 'Get'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(System.Object,C0DEC0RE.SearchMode)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IReadableLocator.Get(object, SearchMode)' so that it no longer conflicts with the reserved language keyword 'Get'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IReadableLocator.Get&lt;TItem&gt;()' so that it no longer conflicts with the reserved language keyword 'Get'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get`1(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IReadableLocator.Get&lt;TItem&gt;(object)' so that it no longer conflicts with the reserved language keyword 'Get'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get`1(System.Object,C0DEC0RE.SearchMode)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IReadableLocator.Get&lt;TItem&gt;(object, SearchMode)' so that it no longer conflicts with the reserved language keyword 'Get'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadOnly" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ReadOnly" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IReadableLocator.ReadOnly' so that it no longer conflicts with the reserved language keyword 'ReadOnly'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IReadWriteLocator" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'IReadWriteLocator' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ITypeMappingPolicy" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Map(C0DEC0RE.DependencyResolutionLocatorKey)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'ITypeMappingPolicy.Map(DependencyResolutionLocatorKey)', correct the casing of 'ID' in parameter name 'incomingTypeIDPair' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="KnownTypeParameter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#type" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'KnownTypeParameter.type' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LifetimeContainer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'LifetimeContainer' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="LifetimeContainer.cs" Line="53">Change 'LifetimeContainer.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LocalMembershipProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="265">Modify 'LocalMembershipProvider.CreateUser(string, string, string, string, string, bool, object, out MembershipCreateStatus)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetConfigValue(System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="272">The 'this' parameter (or 'Me' in Visual Basic) of 'LocalMembershipProvider.GetConfigValue(string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Initialize(System.String,System.Collections.Specialized.NameValueCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="277">Method 'LocalMembershipProvider.Initialize(string, NameValueCollection)' passes parameter name 'config' as the 'message' argument to a 'ArgumentException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
            </Message>
            <Message Id="System.Convert.ToBoolean(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="293">Because the behavior of 'Convert.ToBoolean(string)' could vary based on the current user's locale settings, replace this call in 'LocalMembershipProvider.Initialize(string, NameValueCollection)' with a call to 'Convert.ToBoolean(string, IFormatProvider)'. If the result of 'Convert.ToBoolean(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="294">Because the behavior of 'Convert.ToBoolean(string)' could vary based on the current user's locale settings, replace this call in 'LocalMembershipProvider.Initialize(string, NameValueCollection)' with a call to 'Convert.ToBoolean(string, IFormatProvider)'. If the result of 'Convert.ToBoolean(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="295">Because the behavior of 'Convert.ToBoolean(string)' could vary based on the current user's locale settings, replace this call in 'LocalMembershipProvider.Initialize(string, NameValueCollection)' with a call to 'Convert.ToBoolean(string, IFormatProvider)'. If the result of 'Convert.ToBoolean(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="296">Because the behavior of 'Convert.ToBoolean(string)' could vary based on the current user's locale settings, replace this call in 'LocalMembershipProvider.Initialize(string, NameValueCollection)' with a call to 'Convert.ToBoolean(string, IFormatProvider)'. If the result of 'Convert.ToBoolean(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="287">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'LocalMembershipProvider.Initialize(string, NameValueCollection)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="288">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'LocalMembershipProvider.Initialize(string, NameValueCollection)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="290">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'LocalMembershipProvider.Initialize(string, NameValueCollection)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="291">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'LocalMembershipProvider.Initialize(string, NameValueCollection)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="297">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'LocalMembershipProvider.Initialize(string, NameValueCollection)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="292">Because the behavior of 'Convert.ToString(string)' could vary based on the current user's locale settings, replace this call in 'LocalMembershipProvider.Initialize(string, NameValueCollection)' with a call to 'Convert.ToString(string, IFormatProvider)'. If the result of 'Convert.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="name" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="276">'name', a parameter declared in 'LocalMembershipProvider.Initialize(string, NameValueCollection)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#policy" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'LocalMembershipProvider.policy' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'LocalMembershipProvider.policy' is declared as 'static readonly' but is initialized with a constant value 'LocalPolicy'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LocalRoleProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#userManager" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'LocalRoleProvider.userManager' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Locator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'Locator' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="LocatorNameTypeFactoryBase`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'LocatorNameTypeFactoryBase&lt;T&gt;' because it creates members of the following IDisposable types: 'LifetimeContainer'. If 'LocatorNameTypeFactoryBase&lt;T&gt;' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="LookupParameter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetValue(C0DEC0RE.IBuilderContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="LookupParameter.cs" Line="50">In externally visible method 'LookupParameter.GetValue(IBuilderContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MethodCallInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetParameters(C0DEC0RE.IBuilderContext,System.Type,System.String,System.Reflection.MethodInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="method" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MethodCallInfo.cs" Line="133">'method', a parameter declared in 'MethodCallInfo.GetParameters(IBuilderContext, Type, string, MethodInfo)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectMethod(C0DEC0RE.IBuilderContext,System.Type,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MethodCallInfo.cs" Line="126">In externally visible method 'MethodCallInfo.SelectMethod(IBuilderContext, Type, string)', validate parameter 'type' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MethodReflectionStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddParametersToPolicy(C0DEC0RE.IBuilderContext,System.Type,System.String,C0DEC0RE.IReflectionMemberInfo`1&lt;System.Reflection.MethodInfo&gt;,System.Collections.Generic.IEnumerable`1&lt;C0DEC0RE.IParameter&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MethodReflectionStrategy.cs" Line="37">In externally visible method 'MethodReflectionStrategy.AddParametersToPolicy(IBuilderContext, Type, string, IReflectionMemberInfo&lt;MethodInfo&gt;, IEnumerable&lt;IParameter&gt;)', validate parameter 'context' before using it.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MethodReflectionStrategy.cs" Line="45">In externally visible method 'MethodReflectionStrategy.AddParametersToPolicy(IBuilderContext, Type, string, IReflectionMemberInfo&lt;MethodInfo&gt;, IEnumerable&lt;IParameter&gt;)', validate parameter 'member' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MemberRequiresProcessing(C0DEC0RE.IReflectionMemberInfo`1&lt;System.Reflection.MethodInfo&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MethodReflectionStrategy.cs" Line="53">In externally visible method 'MethodReflectionStrategy.MemberRequiresProcessing(IReflectionMemberInfo&lt;MethodInfo&gt;)', validate parameter 'member' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MMData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ExecuteSQLStr(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SQL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="40">Correct the casing of 'SQL' in member name 'MMData.ExecuteSQLStr(string)' by changing it to 'Sql'.</Issue>
            </Message>
            <Message Id="Str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="40">Correct the spelling of 'Str' in member name 'MMData.ExecuteSQLStr(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="40">The 'this' parameter (or 'Me' in Visual Basic) of 'MMData.ExecuteSQLStr(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="t" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="43">'MMData.ExecuteSQLStr(string)' declares a variable, 't', of type 'DataSet', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteSQLStr(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SQL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="45">Correct the casing of 'SQL' in member name 'MMData.ExecuteSQLStr(string, string)' by changing it to 'Sql'.</Issue>
            </Message>
            <Message Id="Str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="45">Correct the spelling of 'Str' in member name 'MMData.ExecuteSQLStr(string, string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="45">The 'this' parameter (or 'Me' in Visual Basic) of 'MMData.ExecuteSQLStr(string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="t" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="48">'MMData.ExecuteSQLStr(string, string)' declares a variable, 't', of type 'DataSet', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteStoredProc(System.String,System.String,C0DEC0RE.StProcParam[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="50">Correct the spelling of 'Proc' in member name 'MMData.ExecuteStoredProc(string, string, StProcParam[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="params" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="50">In method 'MMData.ExecuteStoredProc(string, string, StProcParam[])', correct the spelling of 'params' in parameter name 'paramsList' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="50">The 'this' parameter (or 'Me' in Visual Basic) of 'MMData.ExecuteStoredProc(string, string, StProcParam[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataSet(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="30">The 'this' parameter (or 'Me' in Visual Basic) of 'MMData.GetDataSet(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataSet(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="35">The 'this' parameter (or 'Me' in Visual Basic) of 'MMData.GetDataSet(string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStProcDataSet(System.String,System.String,C0DEC0RE.StProcParam[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="St" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="60">Correct the casing of 'St' in member name 'MMData.GetStProcDataSet(string, string, StProcParam[])' by changing it to 'ST'.</Issue>
            </Message>
            <Message Id="Proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="60">Correct the spelling of 'Proc' in member name 'MMData.GetStProcDataSet(string, string, StProcParam[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="params" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="60">In method 'MMData.GetStProcDataSet(string, string, StProcParam[])', correct the spelling of 'params' in parameter name 'paramsList' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="60">The 'this' parameter (or 'Me' in Visual Basic) of 'MMData.GetStProcDataSet(string, string, StProcParam[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MMStrUtl" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Str' in type name 'MMStrUtl'.</Issue>
          </Message>
          <Message Id="Utl" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utl' in type name 'MMStrUtl'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'MMStrUtl' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Base64DecodeText(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="127">In member 'MMStrUtl.Base64DecodeText(string)', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Base64EncodeText(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="123">In member 'MMStrUtl.Base64EncodeText(string)', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ByteToHex(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Byte.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="135">Because the behavior of 'byte.ToString(string)' could vary based on the current user's locale settings, replace this call in 'MMStrUtl.ByteToHex(byte[])' with a call to 'byte.ToString(string, IFormatProvider)'. If the result of 'byte.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'MMStrUtl.ByteToHex(byte[])', validate parameter 'byteArray' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Decrypt(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="173">In method 'MMStrUtl.Decrypt(string)', object 'ms' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="169">In method 'MMStrUtl.Decrypt(string)', call System.IDisposable.Dispose on object 'des' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="178">Object 'encStream' can be disposed more than once in method 'MMStrUtl.Decrypt(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 178</Issue>
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="178">Object 'ms' can be disposed more than once in method 'MMStrUtl.Decrypt(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 178, 179</Issue>
            </Message>
            <Message Id="C0DEC0RE.MMStrUtl.Base64DecodeText(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="167">Method 'MMStrUtl.Decrypt(string)' passes a literal string as parameter 'Text' of a call to 'MMStrUtl.Base64DecodeText(string)'. Retrieve the following string(s) from a resource table instead: "MTQxRUM4QTkxNDU2OTMzNw==".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="166">Method 'MMStrUtl.Decrypt(string)' passes a literal string as parameter 'Text' of a call to 'MMStrUtl.Base64DecodeText(string)'. Retrieve the following string(s) from a resource table instead: "QURGNzJBMDUxMjkwMDlGRg==".</Issue>
            </Message>
            <Message Id="QURGNzJBMDUxMjkwMDlGRg" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="166">Correct the spelling of the unrecognized token 'QURGNzJBMDUxMjkwMDlGRg' in the literal '"QURGNzJBMDUxMjkwMDlGRg=="'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="152">In method 'MMStrUtl.Encrypt(string)', object 'ms' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="148">In method 'MMStrUtl.Encrypt(string)', call System.IDisposable.Dispose on object 'des' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="157">Object 'encStream' can be disposed more than once in method 'MMStrUtl.Encrypt(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 157</Issue>
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="157">Object 'ms' can be disposed more than once in method 'MMStrUtl.Encrypt(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 157, 159</Issue>
            </Message>
            <Message Id="C0DEC0RE.MMStrUtl.Base64DecodeText(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="146">Method 'MMStrUtl.Encrypt(string)' passes a literal string as parameter 'Text' of a call to 'MMStrUtl.Base64DecodeText(string)'. Retrieve the following string(s) from a resource table instead: "MTQxRUM4QTkxNDU2OTMzNw==".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="145">Method 'MMStrUtl.Encrypt(string)' passes a literal string as parameter 'Text' of a call to 'MMStrUtl.Base64DecodeText(string)'. Retrieve the following string(s) from a resource table instead: "QURGNzJBMDUxMjkwMDlGRg==".</Issue>
            </Message>
            <Message Id="QURGNzJBMDUxMjkwMDlGRg" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="145">Correct the spelling of the unrecognized token 'QURGNzJBMDUxMjkwMDlGRg' in the literal '"QURGNzJBMDUxMjkwMDlGRg=="'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HexToByte(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="138">In member 'MMStrUtl.HexToByte(string)', consider replacing the data type identifier 'String' in parameter name 'hexString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="139">In externally visible method 'MMStrUtl.HexToByte(string)', validate parameter 'hexString' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseCount(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="delimeters" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="108">In method 'MMStrUtl.ParseCount(string, string)', correct the spelling of 'delimeters' in parameter name 'delimeters' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseString(System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="delimeters" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="113">In method 'MMStrUtl.ParseString(string, string, int)', correct the spelling of 'delimeters' in parameter name 'delimeters' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TranslateToHTMLEncoded(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HTML" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="119">Correct the casing of 'HTML' in member name 'MMStrUtl.TranslateToHTMLEncoded(string)' by changing it to 'Html'.</Issue>
            </Message>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="119">In method 'MMStrUtl.TranslateToHTMLEncoded(string)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="120">In externally visible method 'MMStrUtl.TranslateToHTMLEncoded(string)', validate parameter 'str' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MMWebSiteConstants" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="WebSite" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'WebSite' in type name 'MMWebSiteConstants' exists as a discrete term. If your usage is intended to be single word, case it as 'Website'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'MMWebSiteConstants' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MMWebSiteContext" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="WebSite" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'WebSite' in type name 'MMWebSiteContext' exists as a discrete term. If your usage is intended to be single word, case it as 'Website'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Web.HttpContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="hc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="23">In method 'MMWebSiteContext.MMWebSiteContext(HttpContext)', correct the spelling of 'hc' in parameter name 'hc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="x" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="26">'MMWebSiteContext.MMWebSiteContext(HttpContext)' declares a variable, 'x', of type 'MMStrUtl', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="27">In externally visible method 'MMWebSiteContext.MMWebSiteContext(HttpContext)', validate parameter 'hc' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#varAt(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="36">Modify 'MMWebSiteContext.varAt(string, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="37">Modify 'MMWebSiteContext.varAt(string, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="38">Modify 'MMWebSiteContext.varAt(string, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="34">Correct the casing of 'var' in member name 'MMWebSiteContext.varAt(string, string)' by changing it to 'Var'.</Issue>
            </Message>
            <Message Id="sdefault" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="34">In method 'MMWebSiteContext.varAt(string, string)', correct the spelling of 'sdefault' in parameter name 'sdefault' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NamedConfigurationElement" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#nameProperty" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'name' in member name 'NamedConfigurationElement.nameProperty' by changing it to 'Name'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NamedElementCollection`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ForEach(System.Action`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="NamedElementCollection.cs" Line="35">In externally visible method 'NamedElementCollection&lt;T&gt;.ForEach(Action&lt;T&gt;)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NameTypeConfigurationElement" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Properties" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Properties()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="NameTypeConfigurationElement.cs" Line="67">Make 'NameTypeConfigurationElement.Properties.get()' non-private, mark it as final, or seal its declaring type. This method was originally defined in base class 'ConfigurationElement'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#typeProperty" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="type" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'type' in member name 'NameTypeConfigurationElement.typeProperty' by changing it to 'Type'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NameTypeConfigurationElementCollection`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RetrieveConfigurationElementType(System.Xml.XmlReader)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="NameTypeConfigurationElementCollection.cs" Line="38">In externally visible method 'NameTypeConfigurationElementCollection&lt;T&gt;.RetrieveConfigurationElementType(XmlReader)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NoBindingInstrumentationAttacher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Attacher" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Attacher' in type name 'NoBindingInstrumentationAttacher'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="OracleConnectionSettings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetSettings(C0DEC0RE.IConfigurationSource)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="OracleConnectionSettings.cs" Line="48">In externally visible method 'OracleConnectionSettings.GetSettings(IConfigurationSource)', validate parameter 'configurationSource' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OracleDatabase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TransparentMethodsShouldNotDemandFxCopRule" Category="Microsoft.Security" CheckId="CA2143" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
           <Issue Name="Declarative" Certainty="50" Level="CriticalWarning">'OracleDatabase', a transparent type or method, contains a declarative security demand for 'OraclePermissionAttribute'.  'OracleDatabase' should be made security-safe critical or the demand should be removed from the transparent code.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddParameter(System.Data.OracleClient.OracleCommand,System.String,System.Data.OracleClient.OracleType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="OracleDatabase.cs" Line="126">In externally visible method 'OracleDatabase.AddParameter(OracleCommand, string, OracleType, int, ParameterDirection, bool, byte, byte, string, DataRowVersion, object)', validate parameter 'command' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetParameterValue(System.Data.Common.DbCommand,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="OracleDatabase.cs" Line="240">In member 'OracleDatabase.GetParameterValue(DbCommand, string)', change parameter name 'parameterName' to 'name' in order to match the identifier as it has been declared in 'Database.GetParameterValue(DbCommand, string)'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="OracleDatabase.cs" Line="243">In externally visible method 'OracleDatabase.GetParameterValue(DbCommand, string)', validate parameter 'command' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetParameterValue(System.Data.Common.DbCommand,System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="OracleDatabase.cs" Line="274">In externally visible method 'OracleDatabase.SetParameterValue(DbCommand, string, object)', validate parameter 'command' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TranslatePackageSchema(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="OracleDatabase.cs" Line="438">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'OracleDatabase.TranslatePackageSchema(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OracleDatabaseAssembler" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Assemble(System.String,System.Configuration.ConnectionStringSettings,C0DEC0RE.IConfigurationSource)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="OracleDatabaseAssembler.cs" Line="36">In externally visible method 'OracleDatabaseAssembler.Assemble(string, ConnectionStringSettings, IConfigurationSource)', validate parameter 'connectionStringSettings' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ParameterCache" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddParametersFromCache(System.Data.Common.DbCommand,C0DEC0RE.Database)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ParameterCache.cs" Line="83">In externally visible method 'ParameterCache.AddParametersFromCache(DbCommand, Database)', validate parameter 'command' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ParameterCache.cs" Line="79">In externally visible method 'ParameterCache.AddParametersFromCache(DbCommand, Database)', validate parameter 'database' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ParameterTypeRegistry" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#commandText" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ParameterTypeRegistry.commandText' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PerformanceCounterInstallerBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateInstallers(System.Collections.Generic.ICollection`1&lt;System.Type&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PerformanceCounterInstallerBuilder.cs" Line="49">In externally visible method 'PerformanceCounterInstallerBuilder.CreateInstallers(ICollection&lt;Type&gt;)', validate parameter 'instrumentedTypes' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetExistingCounter(System.Diagnostics.PerformanceCounterInstaller,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PerformanceCounterInstallerBuilder.cs" Line="170">The 'this' parameter (or 'Me' in Visual Basic) of 'PerformanceCounterInstallerBuilder.GetExistingCounter(PerformanceCounterInstaller, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetExistingInstaller(System.String,System.Collections.Generic.IList`1&lt;System.Configuration.Install.Installer&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PerformanceCounterInstallerBuilder.cs" Line="75">The 'this' parameter (or 'Me' in Visual Basic) of 'PerformanceCounterInstallerBuilder.GetExistingInstaller(string, IList&lt;Installer&gt;)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetOrCreateInstaller(System.Type,System.Collections.Generic.IList`1&lt;System.Configuration.Install.Installer&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PerformanceCounterInstallerBuilder.cs" Line="66">In method 'PerformanceCounterInstallerBuilder.GetOrCreateInstaller(Type, IList&lt;Installer&gt;)', object 'installer' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'installer' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetResourceString(System.String,System.Reflection.Assembly)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="PerformanceCounterInstallerBuilder.cs" Line="116">Modify 'PerformanceCounterInstallerBuilder.GetResourceString(string, Assembly)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="PerformanceCounterInstallerBuilder.cs" Line="111">Because the behavior of 'string.LastIndexOf(string)' could vary based on the current user's locale settings, replace this call in 'PerformanceCounterInstallerBuilder.GetResourceString(string, Assembly)' with a call to 'string.LastIndexOf(string, StringComparison)'. If the result of 'string.LastIndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PopulateCounterCategoryData(C0DEC0RE.PerformanceCountersDefinitionAttribute,System.Reflection.Assembly,System.Diagnostics.PerformanceCounterInstaller)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PerformanceCounterInstallerBuilder.cs" Line="85">The 'this' parameter (or 'Me' in Visual Basic) of 'PerformanceCounterInstallerBuilder.PopulateCounterCategoryData(PerformanceCountersDefinitionAttribute, Assembly, PerformanceCounterInstaller)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PerformanceCounterInstanceName" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#maxPrefixLength" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'PerformanceCounterInstanceName.maxPrefixLength' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#maxSuffixLength" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'PerformanceCounterInstanceName.maxSuffixLength' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NormalizeStringLength(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PerformanceCounterInstanceName.cs" Line="66">The 'this' parameter (or 'Me' in Visual Basic) of 'PerformanceCounterInstanceName.NormalizeStringLength(string, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PolicyList" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Clear`1(System.Type,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PolicyList.cs" Line="73">Consider a design where 'PolicyList.Clear&lt;TPolicyInterface&gt;(Type, string)' doesn't require explicit type parameter 'TPolicyInterface' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClearDefault`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PolicyList.cs" Line="107">Consider a design where 'PolicyList.ClearDefault&lt;TPolicyInterface&gt;()' doesn't require explicit type parameter 'TPolicyInterface' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PropertyReflectionStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddParametersToPolicy(C0DEC0RE.IBuilderContext,System.Type,System.String,C0DEC0RE.IReflectionMemberInfo`1&lt;System.Reflection.PropertyInfo&gt;,System.Collections.Generic.IEnumerable`1&lt;C0DEC0RE.IParameter&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PropertyReflectionStrategy.cs" Line="43">In externally visible method 'PropertyReflectionStrategy.AddParametersToPolicy(IBuilderContext, Type, string, IReflectionMemberInfo&lt;PropertyInfo&gt;, IEnumerable&lt;IParameter&gt;)', validate parameter 'context' before using it.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PropertyReflectionStrategy.cs" Line="52">In externally visible method 'PropertyReflectionStrategy.AddParametersToPolicy(IBuilderContext, Type, string, IReflectionMemberInfo&lt;PropertyInfo&gt;, IEnumerable&lt;IParameter&gt;)', validate parameter 'member' before using it.</Issue>
            </Message>
            <Message Id="4" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PropertyReflectionStrategy.cs" Line="51">In externally visible method 'PropertyReflectionStrategy.AddParametersToPolicy(IBuilderContext, Type, string, IReflectionMemberInfo&lt;PropertyInfo&gt;, IEnumerable&lt;IParameter&gt;)', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MemberRequiresProcessing(C0DEC0RE.IReflectionMemberInfo`1&lt;System.Reflection.PropertyInfo&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PropertyReflectionStrategy.cs" Line="61">In externally visible method 'PropertyReflectionStrategy.MemberRequiresProcessing(IReflectionMemberInfo&lt;PropertyInfo&gt;)', validate parameter 'member' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PropertySetterInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SelectProperty(C0DEC0RE.IBuilderContext,System.Type,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="PropertySetterInfo.cs" Line="59">In externally visible method 'PropertySetterInfo.SelectProperty(IBuilderContext, Type, string)', validate parameter 'type' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RCData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(C0DEC0RE.DbConnectionInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Con" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="74">In member 'RCData.RCData(DbConnectionInfo)', correct the casing of 'Con' in parameter name 'ConInfo' by changing it to 'con'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteSQLStr(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Query" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="82">In member 'RCData.ExecuteSQLStr(string)', correct the casing of 'Query' in parameter name 'QueryString' by changing it to 'query'.</Issue>
            </Message>
            <Message Id="SQL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="82">Correct the casing of 'SQL' in member name 'RCData.ExecuteSQLStr(string)' by changing it to 'Sql'.</Issue>
            </Message>
            <Message Id="Str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="82">Correct the spelling of 'Str' in member name 'RCData.ExecuteSQLStr(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteStoredProc(System.String,C0DEC0RE.StProcParam[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Params" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="87">In member 'RCData.ExecuteStoredProc(string, StProcParam[])', correct the casing of 'Params' in parameter name 'ParamsList' by changing it to 'params'.</Issue>
            </Message>
            <Message Id="Procedure" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="87">In member 'RCData.ExecuteStoredProc(string, StProcParam[])', correct the casing of 'Procedure' in parameter name 'ProcedureCode' by changing it to 'procedure'.</Issue>
            </Message>
            <Message Id="Params" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="87">In method 'RCData.ExecuteStoredProc(string, StProcParam[])', correct the spelling of 'Params' in parameter name 'ParamsList' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="87">Correct the spelling of 'Proc' in member name 'RCData.ExecuteStoredProc(string, StProcParam[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="sqlCommand" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="89">'RCData.ExecuteStoredProc(string, StProcParam[])' declares a variable, 'sqlCommand', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="91">In externally visible method 'RCData.ExecuteStoredProc(string, StProcParam[])', validate parameter 'ParamsList' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataSet(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Query" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="77">In member 'RCData.GetDataSet(string)', correct the casing of 'Query' in parameter name 'QueryString' by changing it to 'query'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStProcDataSet(System.String,C0DEC0RE.StProcParam[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Params" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="96">In member 'RCData.GetStProcDataSet(string, StProcParam[])', correct the casing of 'Params' in parameter name 'ParamsList' by changing it to 'params'.</Issue>
            </Message>
            <Message Id="Procedure" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="96">In member 'RCData.GetStProcDataSet(string, StProcParam[])', correct the casing of 'Procedure' in parameter name 'ProcedureCode' by changing it to 'procedure'.</Issue>
            </Message>
            <Message Id="St" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="96">Correct the casing of 'St' in member name 'RCData.GetStProcDataSet(string, StProcParam[])' by changing it to 'ST'.</Issue>
            </Message>
            <Message Id="Params" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="96">In method 'RCData.GetStProcDataSet(string, StProcParam[])', correct the spelling of 'Params' in parameter name 'ParamsList' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="96">Correct the spelling of 'Proc' in member name 'RCData.GetStProcDataSet(string, StProcParam[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="sqlCommand" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="98">'RCData.GetStProcDataSet(string, StProcParam[])' declares a variable, 'sqlCommand', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="100">In externally visible method 'RCData.GetStProcDataSet(string, StProcParam[])', validate parameter 'ParamsList' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReadableLocator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ReadableLocator' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#FindInLocator(System.Predicate`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Object&gt;&gt;,C0DEC0RE.Locator,C0DEC0RE.IReadableLocator)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ReadableLocator.cs" Line="88">The 'this' parameter (or 'Me' in Visual Basic) of 'ReadableLocator.FindInLocator(Predicate&lt;KeyValuePair&lt;object, object&gt;&gt;, Locator, IReadableLocator)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetParentLocator(C0DEC0RE.IReadableLocator)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="parentLocator" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ReadableLocator.cs" Line="150">'parentLocator', a parameter declared in 'ReadableLocator.SetParentLocator(IReadableLocator)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReadOnlyLocator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ReadOnlyLocator' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ReadWriteLocator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ReadWriteLocator' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ReflectionInstaller`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#PrepareInstaller()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Reflection.Assembly.LoadFile" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="System.Reflection.Assembly.LoadFile" Certainty="75" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ReflectionInstaller.cs" Line="50">Remove the call to Assembly.LoadFile from 'ReflectionInstaller&lt;TInstallerBuilder&gt;.PrepareInstaller()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Uninstall(System.Collections.IDictionary)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="ReflectionInstaller.cs" Line="42">In member 'ReflectionInstaller&lt;TInstallerBuilder&gt;.Uninstall(IDictionary)', change parameter name 'stateSaver' to 'savedState' in order to match the identifier as it has been declared in 'Installer.Uninstall(IDictionary)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReflectionInstrumentationAttacher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Attacher" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Attacher' in type name 'ReflectionInstrumentationAttacher'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BindSourceToListener(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ReflectionInstrumentationAttacher.cs" Line="56">The 'this' parameter (or 'Me' in Visual Basic) of 'ReflectionInstrumentationAttacher.BindSourceToListener(object, object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReflectionInstrumentationBinder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetAttributedMembers`2(System.Object,C0DEC0RE.ReflectionInstrumentationBinder+MemberFinder`1&lt;!!0&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ReflectionInstrumentationBinder.cs" Line="73">The 'this' parameter (or 'Me' in Visual Basic) of 'ReflectionInstrumentationBinder.GetAttributedMembers&lt;TMemberInfoType, TAttributeType&gt;(object, ReflectionInstrumentationBinder.MemberFinder&lt;TMemberInfoType&gt;)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEventInfo(System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ReflectionInstrumentationBinder.cs" Line="55">The 'this' parameter (or 'Me' in Visual Basic) of 'ReflectionInstrumentationBinder.GetEventInfo(Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMethodInfo(System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ReflectionInstrumentationBinder.cs" Line="62">The 'this' parameter (or 'Me' in Visual Basic) of 'ReflectionInstrumentationBinder.GetMethodInfo(Type)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReflectionStrategy`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetInjectionAttribute(System.Reflection.ParameterInfo)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="ReflectionStrategy.cs" Line="79">The 'this' parameter (or 'Me' in Visual Basic) of 'ReflectionStrategy&lt;TMemberInfo&gt;.GetInjectionAttribute(ParameterInfo)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMembers(C0DEC0RE.IBuilderContext,System.Type,System.Object,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'ReflectionStrategy&lt;TMemberInfo&gt;.GetMembers(IBuilderContext, Type, object, string)' doesn't nest generic type 'IEnumerable&lt;IReflectionMemberInfo&lt;TMemberInfo&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SerializableConfigurationSection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ReadXml(System.Xml.XmlReader)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SerializableConfigurationSection.cs" Line="44">In externally visible method 'SerializableConfigurationSection.ReadXml(XmlReader)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteXml(System.Xml.XmlWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SerializableConfigurationSection.cs" Line="56">In externally visible method 'SerializableConfigurationSection.WriteXml(XmlWriter)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SingletonStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildUp(C0DEC0RE.IBuilderContext,System.Type,System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SingletonStrategy.cs" Line="42">In externally visible method 'SingletonStrategy.BuildUp(IBuilderContext, Type, object, string)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SqlDatabase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TransparentMethodsShouldNotDemandFxCopRule" Category="Microsoft.Security" CheckId="CA2143" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
           <Issue Name="Declarative" Certainty="50" Level="CriticalWarning">'SqlDatabase', a transparent type or method, contains a declarative security demand for 'SqlClientPermissionAttribute'.  'SqlDatabase' should be made security-safe critical or the demand should be removed from the transparent code.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddParameter(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SqlDatabase.cs" Line="208">In externally visible method 'SqlDatabase.AddParameter(DbCommand, string, SqlDbType, int, ParameterDirection, bool, byte, byte, string, DataRowVersion, object)', validate parameter 'command' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildParameterName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SqlDatabase.cs" Line="161">In externally visible method 'SqlDatabase.BuildParameterName(string)', validate parameter 'name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConfigureParameter(System.Data.SqlClient.SqlParameter,System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="SqlDatabase.cs" Line="312">In method 'SqlDatabase.ConfigureParameter(SqlParameter, string, SqlDbType, int, ParameterDirection, bool, byte, byte, string, DataRowVersion, object)', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SqlDatabase.cs" Line="313">In externally visible method 'SqlDatabase.ConfigureParameter(SqlParameter, string, SqlDbType, int, ParameterDirection, bool, byte, byte, string, DataRowVersion, object)', validate parameter 'param' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParameterToken" Kind="Property" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SqlDatabase.cs" Line="53">The 'this' parameter (or 'Me' in Visual Basic) of 'SqlDatabase.ParameterToken' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SameNumberOfParametersAndValues(System.Data.Common.DbCommand,System.Object[])" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SqlDatabase.cs" Line="186">In externally visible method 'SqlDatabase.SameNumberOfParametersAndValues(DbCommand, object[])', validate parameter 'command' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SqlDatabase.cs" Line="187">In externally visible method 'SqlDatabase.SameNumberOfParametersAndValues(DbCommand, object[])', validate parameter 'values' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SqlDatabaseAssembler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Assemble(System.String,System.Configuration.ConnectionStringSettings,C0DEC0RE.IConfigurationSource)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SqlDatabaseAssembler.cs" Line="33">In externally visible method 'SqlDatabaseAssembler.Assemble(string, ConnectionStringSettings, IConfigurationSource)', validate parameter 'connectionStringSettings' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StProcParam" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="St" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'St' in type name 'StProcParam' by changing it to 'ST'.</Issue>
          </Message>
          <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Param' in type name 'StProcParam'.</Issue>
          </Message>
          <Message Id="Proc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Proc' in type name 'StProcParam'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Data.DbType,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="18">In method 'StProcParam.StProcParam(string, DbType, object)', correct the spelling of 'Param' in parameter name 'aParamType' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="18">In method 'StProcParam.StProcParam(string, DbType, object)', correct the spelling of 'a' in parameter name 'aParamType' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="18">In method 'StProcParam.StProcParam(string, DbType, object)', correct the spelling of 'a' in parameter name 'aVarName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="18">In method 'StProcParam.StProcParam(string, DbType, object)', correct the spelling of 'a' in parameter name 'aVarValue' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParamType" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="24">Correct the spelling of 'Param' in member name 'StProcParam.ParamType' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StrategyList`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddNew`1(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="StrategyList.cs" Line="58">Consider a design where 'StrategyList&lt;TStageEnum&gt;.AddNew&lt;TStrategy&gt;(TStageEnum)' doesn't require explicit type parameter 'TStrategy' in any call to it.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberNewerVersion" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="StrategyList.cs" Line="58">Either replace the suffix 'New' in member name 'StrategyList&lt;TStageEnum&gt;.AddNew&lt;TStrategy&gt;(TStageEnum)' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SystemConfigurationSource" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(C0DEC0RE.IConfigurationParameter,System.String,System.Configuration.ConfigurationSection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="SystemConfigurationSource.cs" Line="148">Method 'SystemConfigurationSource.Add(IConfigurationParameter, string, ConfigurationSection)' passes 'saveParameter' as the 'paramName' argument to a 'ArgumentException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="SystemConfigurationSource.cs" Line="146">In member 'SystemConfigurationSource.Add(IConfigurationParameter, string, ConfigurationSection)', change parameter name 'addParameter' to 'saveParameter' in order to match the identifier as it has been declared in 'IConfigurationSource.Add(IConfigurationParameter, string, ConfigurationSection)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(C0DEC0RE.IConfigurationParameter,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="SystemConfigurationSource.cs" Line="163">Method 'SystemConfigurationSource.Remove(IConfigurationParameter, string)' passes 'saveParameter' as the 'paramName' argument to a 'ArgumentException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SystemConfigurationSource.cs" Line="122">The 'this' parameter (or 'Me' in Visual Basic) of 'SystemConfigurationSource.Remove(string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String,System.String,System.Configuration.ConfigurationSection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SystemConfigurationSource.cs" Line="103">The 'this' parameter (or 'Me' in Visual Basic) of 'SystemConfigurationSource.Save(string, string, ConfigurationSection)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateArgumentsAndFileExists(System.String,System.String,System.Configuration.ConfigurationSection)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="SystemConfigurationSource.cs" Line="174">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'SystemConfigurationSource.ValidateArgumentsAndFileExists(string, string, ConfigurationSection)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SystemConfigurationSourceImplementation" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RefreshAndValidateSections(System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;,System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;,System.Collections.Generic.ICollection`1&lt;System.String&gt;&amp;,System.Collections.Generic.IDictionary`2&lt;System.String,System.String&gt;&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SystemConfigurationSourceImplementation.cs" Line="84">In externally visible method 'SystemConfigurationSourceImplementation.RefreshAndValidateSections(IDictionary&lt;string, string&gt;, IDictionary&lt;string, string&gt;, out ICollection&lt;string&gt;, out IDictionary&lt;string, string&gt;)', validate parameter 'localSectionsToRefresh' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SystemConfigurationSourceImplementation.cs" Line="99">In externally visible method 'SystemConfigurationSourceImplementation.RefreshAndValidateSections(IDictionary&lt;string, string&gt;, IDictionary&lt;string, string&gt;, out ICollection&lt;string&gt;, out IDictionary&lt;string, string&gt;)', validate parameter 'externalSectionsToRefresh' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SystemConfigurationSourceImplementation.cs" Line="95">In externally visible method 'SystemConfigurationSourceImplementation.RefreshAndValidateSections(IDictionary&lt;string, string&gt;, IDictionary&lt;string, string&gt;, out ICollection&lt;string&gt;, out IDictionary&lt;string, string&gt;)', validate local variable ''(*sectionsToNotify)'', which was reassigned from parameter 'sectionsToNotify', before using it.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SystemConfigurationSourceImplementation.cs" Line="91">In externally visible method 'SystemConfigurationSourceImplementation.RefreshAndValidateSections(IDictionary&lt;string, string&gt;, IDictionary&lt;string, string&gt;, out ICollection&lt;string&gt;, out IDictionary&lt;string, string&gt;)', validate local variable ''(*sectionsWithChangedConfigSource)'', which was reassigned from parameter 'sectionsWithChangedConfigSource', before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RefreshExternalSections(System.String[])" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="SystemConfigurationSourceImplementation.cs" Line="121">In externally visible method 'SystemConfigurationSourceImplementation.RefreshExternalSections(string[])', validate parameter 'sectionsToRefresh' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SysVar" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Web.Caching.Cache)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Local" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="190">In member 'SysVar.SysVar(Cache)', correct the casing of 'Local' in parameter name 'LocalCacheAccess' by changing it to 'local'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetVarValue(System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="218">Modify 'SysVar.GetVarValue(string, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="225">Modify 'SysVar.GetVarValue(string, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Convert.ToString(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="218">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'SysVar.GetVarValue(string, string)' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.String,System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Database" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="228">In member 'SysVar.this[string, string]', correct the casing of 'Database' in parameter name 'DatabaseName' by changing it to 'database'.</Issue>
            </Message>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="228">In member 'SysVar.this[string, string]', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
            </Message>
            <Message TypeName="IndexersShouldNotBeMultidimensional" Category="Microsoft.Design" CheckId="CA1023" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="228">Redesign indexer 'SysVar.this[string, string]' to use a single string or integer value as its index.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetVarValue(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="204">Modify 'SysVar.SetVarValue(string, string, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SysVarDBRC" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="DBRC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'DBRC' in type name 'SysVarDBRC' by changing it to 'Dbrc'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Connection" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="234">In member 'SysVarDBRC.SysVarDBRC(string)', correct the casing of 'Connection' in parameter name 'ConnectionString' by changing it to 'connection'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetVarValue(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="260">Modify 'SysVarDBRC.GetVarValue(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="263">Modify 'SysVarDBRC.GetVarValue(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Convert.ToString(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="260">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'SysVarDBRC.GetVarValue(string)' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="266">In member 'SysVarDBRC.this[string]', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetVarValue(System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMData.cs" Line="246">Modify 'SysVarDBRC.SetVarValue(string, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TypeMappingStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildUp(C0DEC0RE.IBuilderContext,System.Type,System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="TypeMappingStrategy.cs" Line="31">In member 'TypeMappingStrategy.BuildUp(IBuilderContext, Type, object, string)', change parameter name 't' to 'typeToBuild' in order to match the identifier as it has been declared in 'BuilderStrategy.BuildUp(IBuilderContext, Type, object, string)'.</Issue>
            </Message>
            <Message Id="3#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="TypeMappingStrategy.cs" Line="31">In member 'TypeMappingStrategy.BuildUp(IBuilderContext, Type, object, string)', change parameter name 'id' to 'idToBuild' in order to match the identifier as it has been declared in 'BuilderStrategy.BuildUp(IBuilderContext, Type, object, string)'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="TypeMappingStrategy.cs" Line="33">In externally visible method 'TypeMappingStrategy.BuildUp(IBuilderContext, Type, object, string)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="User" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EncodePassword(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="78">In method 'User.EncodePassword(string)', call System.IDisposable.Dispose on object 'md5Hasher' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="pwd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="76">In method 'User.EncodePassword(string)', correct the spelling of 'pwd' in parameter name 'pwd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="77">Replace the call to 'string.operator ==(string, string)' in 'User.EncodePassword(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getSALT()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="63">Replace the call to 'string.operator ==(string, string)' in 'User.getSALT()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getUserID()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="70">Replace the call to 'string.operator ==(string, string)' in 'User.getUserID()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoginName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Login" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="86">Replace the term 'Login' in member name 'User.LoginName' with the preferred alternate 'LogOn'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#pNotes" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'User.pNotes' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UserID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="92">Correct the casing of 'ID' in member name 'User.UserID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UserManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Authenticate(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="168">In method 'UserManager.Authenticate(string, string)', call System.IDisposable.Dispose on object 'md5Hasher' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUserFromRow(System.Data.DataRow)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="147">The 'this' parameter (or 'Me' in Visual Basic) of 'UserManager.BuildUserFromRow(DataRow)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Convert.ToBoolean(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="156">Because the behavior of 'Convert.ToBoolean(object)' could vary based on the current user's locale settings, replace this call in 'UserManager.BuildUserFromRow(DataRow)' with a call to 'Convert.ToBoolean(object, IFormatProvider)'. If the result of 'Convert.ToBoolean(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getRoleID(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="177">'UserManager.getRoleID(string)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="177">The 'this' parameter (or 'Me' in Visual Basic) of 'UserManager.getRoleID(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="role" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="177">Parameter 'role' of 'UserManager.getRoleID(string)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUser(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="132">Modify 'UserManager.GetUser(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUserID(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="144">Modify 'UserManager.GetUserID(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="135">Correct the casing of 'ID' in member name 'UserManager.GetUserID(string)' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="135">In member 'UserManager.GetUserID(string)', correct the casing of 'ID' in parameter name 'userID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#policy" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'UserManager.policy' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'UserManager.policy' is declared as 'static readonly' but is initialized with a constant value 'LocalPolicy'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UserUpdate(C0DEC0RE.User)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="109">Modify 'UserManager.UserUpdate(User)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="106">The 'this' parameter (or 'Me' in Visual Basic) of 'UserManager.UserUpdate(User)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="e" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="109">'UserManager.UserUpdate(User)' declares a variable, 'e', of type 'Exception', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="ud" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="111">'UserManager.UserUpdate(User)' declares a variable, 'ud', of type 'DataSet', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="109">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'UserManager.UserUpdate(User)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="MMWebSiteUsers.cs" Line="109">In externally visible method 'UserManager.UserUpdate(User)', validate parameter 'toUpdate' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WeakRefDictionary`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'WeakRefDictionary&lt;TKey, TValue&gt;' so that it does not end in 'Dictionary'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DecodeNullObject`1(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="WeakRefDictionary.cs" Line="165">The 'this' parameter (or 'Me' in Visual Basic) of 'WeakRefDictionary&lt;TKey, TValue&gt;.DecodeNullObject&lt;TObject&gt;(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncodeNullObject(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Dev\A Projects\C0DEC0RE" File="WeakRefDictionary.cs" Line="173">The 'this' parameter (or 'Me' in Visual Basic) of 'WeakRefDictionary&lt;TKey, TValue&gt;.EncodeNullObject(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEnumerator()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-05-17 05:16:05Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'WeakRefDictionary&lt;TKey, TValue&gt;.GetEnumerator()' doesn't nest generic type 'IEnumerator&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
   <Name>Abstract types should not have constructors</Name>
   <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
   <Resolution Name="Default">Change the accessibility of all public constructors in {0} to protected.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182126.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001">
   <Name>Avoid calling problematic methods</Name>
   <Description>Avoid making unnecessary and potentially dangerous method calls.</Description>
   <Resolution Name="System.Reflection.Assembly.LoadFile">Remove the call to Assembly.LoadFile from {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385973.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="reliabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040">
   <Name>Avoid empty interfaces</Name>
   <Description>Interfaces are meant to contain members that specify a set of behaviors. To mark or label a class, use an attribute instead of an empty interface.</Description>
   <Resolution Name="Default">Define a custom attribute to replace {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182128.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005">
   <Name>Avoid excessive parameters on generic types</Name>
   <Description>Avoid generic types with more than two type parameters as users have difficulties understanding what type parameters represent in types with long type parameter lists.</Description>
   <Resolution Name="Default">Consider a design where {0} has no more than 2 type parameters.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182129.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be an out parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182131.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182265.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813">
   <Name>Avoid unsealed attributes</Name>
   <Description>Seal attribute types for improved performance. Sealing attribute types speeds up performance during reflection on custom attributes.</Description>
   <Resolution Name="Default">Seal {0}, if possible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182267.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816">
   <Name>Call GC.SuppressFinalize correctly</Name>
   <Description>Call GC.SuppressFinalize to suppress finalization of your instance once Dispose has been called. Objects that implement IDisposable should call SuppressFinalize from the IDisposable.Dispose method to prevent the garbage collector from calling Object.Finalize on an object that does not require it.</Description>
   <Resolution Name="NotCalled">Change {0} to call {1}. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182269.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="TypeShouldBeDiscreteTerm">The compound word '{0}' in type name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019">
   <Name>Define accessors for attribute arguments</Name>
   <Description>Provide accessors for both named and positional arguments. Each positional argument on an attribute should declare a read-only property with the same name (but different casing). Each named argument should provide a read/write property with the same name (but different casing).</Description>
   <Resolution Name="Default">Add a public read-only property accessor for positional argument {0} of Attribute {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182136.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182328.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 178</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDecreaseInheritedMemberVisibility" Category="Microsoft.Usage" CheckId="CA2222">
   <Name>Do not decrease inherited member visibility</Name>
   <Description>It is incorrect to override a public method from an inherited class with a private implementation, unless the type is sealed or the method is marked final. It is considered bad form to hide a method signature halfway down an inheritance tree.</Description>
   <Resolution Name="Default">Make {0} non-private, mark it as final, or seal its declaring type. This method was originally defined in base class {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182332.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
   <Name>Generic methods should provide type parameter</Name>
   <Description>Methods where the type parameter cannot be inferred from the parameters and therefore has to be defined in the method call are too difficult to understand. Methods with a formal parameter typed as the generic method type parameter support inference. Methods with no formal parameter typed as the generic method type parameter don't support inference.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182150.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Assembly">Correct the casing of '{0}' in assembly name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberAbbreviation">Correct the casing of '{0}' in member name {1} by changing it to '{2}'. '{2}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="MemberParameterAbbreviation">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'. '{3}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="Namespace">Correct the casing of '{0}' in namespace name '{1}' by changing it to '{2}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708">
   <Name>Identifiers should differ by more than case</Name>
   <Description>Do not use names that require case sensitivity for uniqueness. Components must be fully usable from both case-sensitive and case-insensitive languages. Since case-insensitive languages cannot distinguish between two names within the same context that differ only by case, components must avoid this situation.</Description>
   <Resolution Name="Member">Change member names {0} and '{1}' so that they differ by more than case.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182242.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
   <Name>Identifiers should have correct suffix</Name>
   <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
   <Resolution Name="Default">Rename {0} to end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182244.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="MemberParameter">In member {0}, remove the underscores from parameter name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="MemberNewerVersion">Either replace the suffix '{0}' in member name {1} with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces.</Resolution>
   <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182247.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Resolution Name="MemberParameter">In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Resolution Name="FinalizeImplementation">Modify {0} so that it calls Dispose(false) and then returns.</Resolution>
   <Resolution Name="RenameDispose">Rename {0} to 'Dispose' and ensure that it is declared as public and sealed.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IndexersShouldNotBeMultidimensional" Category="Microsoft.Design" CheckId="CA1023">
   <Name>Indexers should not be multidimensional</Name>
   <Description>Indexers (indexed properties) should use a single value (either an integer or string types) for indexing values. Multidimensional indexers can significantly reduce the usability of the library. For example, public object this [int index1, int index2] is a non-intuitive indexer.</Description>
   <Resolution Name="Default">Redesign indexer {0} to use a single string or integer value as its index.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182152.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="IncorrectMessage">Method {0} passes parameter name '{1}' as the {2} argument to a {3} constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Resolution>
   <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Resolution Name="NoArguments">Call the {0} constructor that contains a message and/or paramName parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182153.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824">
   <Name>Mark assemblies with NeutralResourcesLanguageAttribute</Name>
   <Description>The NeutralResourcesLanguage attribute informs the ResourceManager of the language used to render the neutral culture's resources for an assembly. When looking up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources located in the main assembly, instead of searching for a satellite assembly with the current user interface culture for the current thread. This will improve lookup performance for the first resource you load and can reduce your working set.</Description>
   <Resolution Name="Default">Because assembly {0} contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385967.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018">
   <Name>Mark attributes with AttributeUsageAttribute</Name>
   <Description>The AttributeUsage attribute specifies the targets that are valid for the attribute (see System.AttributeTargets), whether an attribute can appear on a target more than once, and whether the attribute is inheritable.</Description>
   <Resolution Name="Default">Specify AttributeUsage on {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182158.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182353.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308">
   <Name>Normalize strings to uppercase</Name>
   <Description>Strings should be normalized to upper-case.</Description>
   <Resolution Name="ToUpperInvariant">In method {0}, replace the call to {1} with String.ToUpperInvariant().</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182276.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/0fss9skc.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721">
   <Name>Property names should not match get methods</Name>
   <Description>A Get method was found with the same name as a property. Get methods and properties should have names that clearly distinguish their function. See the design guidelines for information regarding choosing properties over methods.</Description>
   <Resolution Name="BaseType">The property name {0} is confusing given the existence of inherited method {1}. Rename or remove this property.</Resolution>
   <Resolution Name="SameType">The property name {0} is confusing given the existence of method {1}. Rename or remove one of these members.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182253.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="CSharp2_0">Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="TransparentMethodsShouldNotDemandFxCopRule" Category="Microsoft.Security" CheckId="CA2143">
   <Name>Transparent methods should not use security demands</Name>
   <Description>Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions.  Any code which is performing security checks, such as security demands, should be safe-critical instead.</Description>
   <Resolution Name="Declarative">{0}, a transparent type or method, contains a declarative security demand for {1}.  {0} should be made security-safe critical or the demand should be removed from the transparent code.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/dd997566(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalWarning</MessageLevel>
   <File Name="securitytransparencyrules.dll" Version="4.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030">
   <Name>Use events where appropriate</Name>
   <Description>A method name suggestive of event functionality was encountered.</Description>
   <Resolution Name="Default">Consider making {0} an event.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182177.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003">
   <Name>Use generic event handler instances</Name>
   <Description>Do not declare new delegates to be used as event handlers when targeting a version of the .NET Framework that supports generics. Use an instance EventHandler&lt;T&gt; instead.</Description>
   <Resolution Name="Default">Remove {0} and replace its usage with EventHandler&lt;T&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182178.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802">
   <Name>Use literals where appropriate</Name>
   <Description>Prefer literals over InitOnly fields if values do not have to be calculated at runtime.</Description>
   <Resolution Name="Default">Field {0} is declared as 'static readonly' but is initialized with a constant value '{1}'. Mark this field as 'const' instead.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182280.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309">
   <Name>Use ordinal StringComparison</Name>
   <Description>For non-linguistic comparisons, StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase should be used instead of the linguistically-sensitive StringComparison.InvariantCulture.</Description>
   <Resolution Name="StringComparer">{0} passes '{1}' as the 'StringComparer' parameter to {2}. To perform a non-linguistic comparison, specify 'StringComparer.Ordinal' or 'StringComparer.OrdinalIgnoreCase' instead.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385972.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="Member">Replace the term '{0}' in member name {1} with the preferred alternate '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182258.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Resolution Name="Reassigned">In externally visible method {0}, validate local variable '{1}', which was reassigned from parameter '{2}', before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500">
   <Name>Variable names should not match field names</Name>
   <Description>Instance field and variable names should not be identical within the same scope.</Description>
   <Resolution Name="Local">{0}, a variable declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Resolution Name="Parameter">{0}, a parameter declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182216.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
